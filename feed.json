{
    "version": "https://jsonfeed.org/version/1",
    "title": "白夜书",
    "subtitle": "^ ^",
    "icon": "https://nocturne-tome.cn/assets/favicon.ico",
    "description": "来点奇思妙想~!",
    "home_page_url": "https://nocturne-tome.cn",
    "items": [
        {
            "id": "https://nocturne-tome.cn/literature/transcribe/article/%E5%92%8C%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BA%BA%E5%81%9A%E6%9C%8B%E5%8F%8B%E4%BC%9A%E6%AF%94%E8%BE%83%E8%BD%BB%E6%9D%BE/",
            "url": "https://nocturne-tome.cn/literature/transcribe/article/%E5%92%8C%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BA%BA%E5%81%9A%E6%9C%8B%E5%8F%8B%E4%BC%9A%E6%AF%94%E8%BE%83%E8%BD%BB%E6%9D%BE/",
            "title": "和什么样的人做朋友会比较轻松?",
            "date_published": "2025-10-28T11:41:09.000Z",
            "content_html": "<div align=\"center\">腐乳不愁问道</div>\n<p>没有人会拒绝和相处轻松的人做朋友，就像没有人会拒绝大自然。和这样的朋友在一起，就像是炎炎夏日穿着人字拖拎着西瓜走在拂面的晚风里，也像是脱掉高跟鞋赤脚踩在柔软的草坪上，有一种强烈被包围的安全感，又不会因为亲密而变得窒息。他们的存在，像空气、如大地，令人松弛自在。<br />\n轻松的友谊大抵如此，是无需时时刻刻形影不离的黏腻，是不会斤斤计较付出与得到的等价交换，也是不必兴师动众对友谊主权的宣扬。<br />\n相处轻松的朋友，永远不会在得知你正在吃饭时发出 “和谁吃？在哪吃？吃的什么 “这样的妈味三连灵魂拷问。用控制欲去展开一段友谊，这样的人能让原本一次日常悠闲的约会都变得透不过气。</p>\n",
            "tags": [
                "文学",
                "摘录",
                "文学",
                "摘录",
                "文章"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/literature/writings/%E6%95%85%E4%BA%8B/",
            "url": "https://nocturne-tome.cn/literature/writings/%E6%95%85%E4%BA%8B/",
            "title": "故事",
            "date_published": "2025-09-19T15:28:33.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<blockquote>\n<p>故事的力量<br />\n好的故事，可以帮我们更好地表达和沟通，可以触动心灵、启迪智慧；好的故事，可以改变一个人的命运，可以展现一个民族的形象…… 故事是有力量的。<br />\n以上材料引发了你怎样的联想和思考？请写一篇文章。</p>\n</blockquote>\n<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<blockquote>\n<p>提炼：故事、力量<br />\n想法：写一篇 “故事”，在故事里面讲故事</p>\n</blockquote>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>我，一名普普通通的文档管理小职员，工作日朝 9 晚 9，苦不堪言。不过好在今天是周末，可算熬到了我最期待的环节 —— 史料阅读时间。今天考察的内容是：4 亿多年前灭绝的太阳系蓝星人类文明。<br />\n因为是低等文明，所以记录仍使用实体书籍作为载体，但也无妨，我最近正好喜欢上了这种原始的触感。抚摸着书页上的文字，仿佛置身于作者所在的时空。<br />\n这次摆在我面前的，是一篇日记：</p>\n<div class=\"note warning no-icon\">\n<p><span class=\"label info\">2023 年 6 月 4 日</span>         <span class=\"label primary\">星期天</span>          <span class=\"label\">多云</span><br />\n烦！还有 3 天就要上刑场，眼看高中生涯马上结束，但我未来的人生方向，仍然没有着落。唉！<br />\n但，也不是完全没有头绪，只是…… 不被认可罢了。<br />\n私以为，作家，执笔杆为武，挥斥方遒，写尽天下万物，抒发心中所想，是可敬之人。他们既可弯腰俯身察民情，也能登上天穹摘星辰。这是我做梦都向往的人呐！<br />\n可是家里人却以 “你写作怎么养家糊口” 这样简简单单的一句话，就轻而易举地击碎了我的梦想。唉！终究还是出师未捷身先死！<br />\n想成为作家的缘由？好像有两个关键节点。</p>\n</div>\n<p>“喂喂喂，怎么回事，今天让你交的材料呢？不想干了是不是？” 书籍前闪出一个电子终端，屏幕的正中间摆着一张臭脸。<br />\n“啊领导，今天不是休息日嘛，我现在正在忙，等我忙完了就给您。还有，额…… 我不叫喂，请叫我星际探险家。”<br />\n“哟，探险家，很神气嘛，什么时候启航啊，咋天天呆在家里呢？记得好好保养你的飞船，不要生锈了哈哈哈哈……”<br />\n“他妈的，滚啊”，我骂骂咧咧地切断通讯，并启动了免打扰模式 ——5 分钟版，这是我能动用的最高权限了。<br />\n随即一头扎进日记里。</p>\n<div class=\"note warning no-icon\">\n<p>小学五年级，学校新开了一个图书室，老师动员我们多读书，于是我借到了《悲惨世界》。虽然是青少年删减版，但里面的人物和故事依旧深深打动了我的内心。<br />\n改邪归正的慈祥老父亲冉阿让、集时代悲剧于一身的芳汀、在旧规则与人性之间挣扎的沙威、饱含着希望和理想的马吕斯与珂赛特…… 也许当时的我并没有办法完全读懂这些悲剧和苦难，但它确实在我幼小的心灵里埋下了一颗向善的种子，以及对作家的憧憬。<br />\n上初中后，我成了书店的常客。即使并不买书，我也会去里面转上几圈，只要能看着它们我就很舒心。于是每每有时间都会泡在书店。<br />\n依稀记得那是一个午后，我照例在书店里淘书。仿佛是受到了指引一般，头一扭目光就落到一本不起眼的书上：《三体》。不太记得当时的心理活动，总之我买了下来，并利用晚自习读完了。<br />\n读完后脑子里只有一个字：绝。于是立马推荐给了朋友，没曾想一传十，十传百，到后来几乎全班同学都读过了。其实当时我们都不太能看懂，因为欠缺相应的物理知识。但奈何大刘写的太好了，以至于大家都津津有味地读完了。<br />\n那是我第一次感受到，原来好的故事是有共性、可分享的。它不仅可以给人力量，更重要的是架起了一座沟通的桥梁，将两岸的人连结起来，这不正是故事存在的意义吗？我也想成为这样，能传递力量、带来希望的人。<br />\n只不过，现在家里人都在旁敲侧击地让我学医、当老师：“哎呀，学医好呀，读到博士出来非常吃香，隔壁的那个阿黄，现在就在省医院工作，年入 30w 呢”、“当老师也挺好的，自己开个辅导班，也很挣钱，还有寒暑假期，你们班上的何老师就是”……<br />\n 生存当然是第一要义，但我不想活的如此功利，即使他们说的都对，我也要坚持自己的梦想，毕竟人生只有一次，不追逐梦想，意义何在？<br />\n也许我没办法成为专职作家，但这并不妨碍写作成为我的业余爱好。我相信只要保持期待、不忘初心，希望的种子定会在未来开出热烈之花。<br />\n我想对自己说：不要停止梦想，因为梦想给予了生活无限可能。<br />\n最后，高考加油！</p>\n</div>\n<p>合上日记，我久久不能释怀。没想到这样一个蓝星普通人类的故事，竟然能让我产生强烈的共鸣。这不正是曾经的自己吗？我曾想遨游宇宙，却妥协于生活。不甘心呀，所以才以星际探险家自诩，可也仅限于此罢了，现在想想也挺讽刺的。<br />\n“蓝星人算是排名第二的低等文明，这种生物毫无价值”，老师课堂上说的话还历历在目。但，我觉得，无论高级与否，只要是拥有梦想的文明，都是存在价值的，也都是可敬的。<br />\n真是的，被低等文明上了一课呢。也许我也，是时候重新拾起，那个充满希望、怀揣童真的自己了。<br />\n“你小子，不想活了？！不仅切断对话还骂我是吧，得，你明天不用来上班了，自己在家玩弄那破烂飞船吧！”<br />\n 电子终端再次出现，这次我显然平静多了。<br />\n“谢谢，正有此意。” 说完便再次切断了联络。<br />\n几天后，我将辞去工作，第一次真正操纵飞船，驶向那广阔无垠、布满璀璨星河的宇宙。</p>\n<p>非常高兴你能读到最后，这将是我启航前在母星留下的最后一篇记录，我想告诉更多的同胞，只要有梦，勇敢去追。祝你我能在梦想的彼岸相会。</p>\n<div align=\"right\">作于1034恒纪2435日</div>\n",
            "tags": [
                "文学",
                "写作",
                "文学",
                "写作",
                "文章"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/literature/transcribe/article/%E6%AF%9B%E5%A7%86%E7%9A%84%E5%86%99%E4%BD%9C%E5%BB%BA%E8%AE%AE/",
            "url": "https://nocturne-tome.cn/literature/transcribe/article/%E6%AF%9B%E5%A7%86%E7%9A%84%E5%86%99%E4%BD%9C%E5%BB%BA%E8%AE%AE/",
            "title": "毛姆的写作建议",
            "date_published": "2025-06-10T08:52:32.000Z",
            "content_html": "<h1 id=\"毛姆的写作建议\"><a class=\"anchor\" href=\"#毛姆的写作建议\">#</a> 毛姆的写作建议</h1>\n<ol>\n<li>你必须比观众先感到厌倦</li>\n<li>写作者的的座右铭必须是：能删则删，删了再删，直达观众注意力的顶点</li>\n<li>我们作家必须研究的还是普通人。普通人才是作家更为肥沃的土壤</li>\n<li>我想摒弃浮华词藻，用尽量直白、不矫饰的方式写作</li>\n</ol>\n<h1 id=\"毛姆的妙语连珠\"><a class=\"anchor\" href=\"#毛姆的妙语连珠\">#</a> 毛姆的妙语连珠</h1>\n<p>&quot;I hava an idea that the only think which make it possible to regard this world we live in without disgust is the beauty which now and then men create out of the chaos. The pictures they paint, the music they compose, the books they write, and the lives they lead. Of all these the richest in beauty is the beautiful life. That is the perfect work of arts.&quot;</p>\n<p>“我想，唯一能让我们毫无厌恶地看待我们生活的这个世界的，就是人们是不是从混乱中创造出来的美。他们画的画，他们谱写的乐章，他们写的书，他们过的生活。在所有这些中，最美的是美丽的生活，那是一件完美的艺术品。”</p>\n<p>&quot;I have a idea that some men are born out of their due place. Accident has cast them amid certain surroundings, but they have always nostalgia for a home they kown not. They are strangers in their birthplace, and they leafy lenes they have konwn from childhood or the populours streets in which they have played, remain but a place of passage.&quot;</p>\n<p>“我认为有些人诞生在某一个地方可以说为得其所。机缘把他们随便抛掷到一个环境中，而他们却一直思念着一处他们自己也不知道坐落在何处的家乡。在出生的地方他们好像是过客；从孩提时我就非常熟悉的浓荫郁郁的小巷，同小伙伴游戏其中的人烟稠密的街衢，对他们来说斗不过是旅途中的一个宿站。”</p>\n<p>&quot;They may spend their whole lives aliens among their kindred and remain aloof among the only scenes they have ever known. Perhaps it is this scenes of strangeness that sends men far and wide in search for something permanent, to witch they may attach themselves. Perhaps some deep-rooted atavism urges the wanderer back to lands which his ancestors left in the dim beginnings of history.&quot;</p>\n<p>“这种人在自己亲友中可能终生落落寡合，在他们唯一熟悉的环境里也始终孑身独处。也许正是在本乡本土的这种陌生感才逼着他们远游异乡，寻找一处永恒定居的寓所。说不定在他们内心深处仍然隐伏着多少世代前祖先的习惯和癖好，叫这些彷徨者再回到他们祖先在远古就已离开的土地。”</p>\n<p>&quot;Each one of us is alone in the world. He is shut in a tower of brass, and can communicate with his fellows only by sings, and the sings have no common value, so that their sense is vague and uncertain. We seek pitifully to convey to others the treasures of our heart, but they have not the power to accept them, and so we go lonely, side by side but not together, unable to know our fellows and unknown by them.&quot;</p>\n<p>“每个人生在世界上都是孤独的。每个人都被囚禁在一座铁塔力，只能靠一些符号同别人传达自己的思想，而这些符号并没有共同的价值，因此它的意义是模糊的、不确定的。我们非常可怜地想把心中的财富传送给别人，但是他们却没有接受这样财富的能力。因此我们只能孤独地行走，尽管身体相互依傍却不在一起，既不了解别人也不能为他人所理解。”</p>\n<p>&quot;We are like people in a country whose language they know so little that, with all manner of beautiful and profound things to sag, they are condemned to the banalities of the conversation manual. Their brain is seething with ideas, and they can only tell you that the unbrella of the gardener's aunt is in the house.&quot;</p>\n<p>“我们好像住在异国的人，对这个国家的语言懂得非常少，虽然我们有各种奇妙的、深奥的事情要说，却只能局限于会话手册上那几句陈腐、平庸的话。我们脑子里充满了各种思想，而我们能说的只不过是像‘园丁的姑母有一把伞在屋子里’这类话。”</p>\n",
            "tags": [
                "文学",
                "摘录",
                "文学",
                "摘录",
                "文章"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/literature/transcribe/article/%E6%97%A0%E7%AB%AF%E6%AC%A2%E5%96%9C/",
            "url": "https://nocturne-tome.cn/literature/transcribe/article/%E6%97%A0%E7%AB%AF%E6%AC%A2%E5%96%9C/",
            "title": "无端欢喜",
            "date_published": "2025-06-06T06:53:11.000Z",
            "content_html": "<div align=\"center\">余秀华</div>\n<p>我们一出生就在一个陈旧的世界上，有许多游戏规则要遵守，否则就会出局。怎么活着，永远是活着的课题。人们无所事事的时候会想一想，想不明的的时候就放一边；等无所事事的时候再想一想，一辈子就过去了。<br />\n年轻时我也想过：要么活得有意义，这个意义就是不断地给自己新的东西；要么死去，反正人迟早是要死的。后来我觉得这个想法完全错误。活着，是整个宇宙最宽泛的东西，所谓的意义和价值充其量就是一条直线，把另外的风景都弃之一边了，这是很可惜的一件事情。<br />\n大部分人，必须过的是漫长而没有意义的枯燥日子，没有选择。有的人会成功，但成功之前和成功之后同样是枯燥而漫长的日子。我觉得一个人的成功除事业的成功以外，更持久和更入心的成功实在庸俗的日子里寻找到快乐。这种快乐的获得会很简单：你种过一棵植物吗？你看过它发芽、生长、开花、结果的整个过程吗？<br />\n比如一部手机，是的，它的功能用不了几天就可以摸得清清楚楚，但摸清楚以后不等于能完全地利用，就算完全地利用，以后也还会更新。比如我的手机，我首先会下载一个好用的电子书阅读软件，光这一项，就足够我玩好多年了。<br />\n我并不轻视那些自杀的人，我只希望他们自杀未遂。如果真的经历了生死，人生的境界会很不一样，至少可以活的从容一些：奶奶的，我就是要和这庸俗的、没有意义的生活死磕到底！<br />\n史铁生说，不要急，死亡一直在等着你。好像死亡是一个你非常讨厌的结婚对象。那么好吧，既然必须和这个无聊的家伙结婚，我一定要把我的忠贞、我的热情、我的好奇心、我的爱浪费在这个世界上，把一副空壳留给它。</p>\n",
            "tags": [
                "文学",
                "摘录",
                "文学",
                "摘录",
                "文章"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/literature/transcribe/article/%E6%B8%B8%E6%88%8F%E9%87%8C%E9%9D%A2%E6%9C%89%E5%A4%A7%E5%93%A5/",
            "url": "https://nocturne-tome.cn/literature/transcribe/article/%E6%B8%B8%E6%88%8F%E9%87%8C%E9%9D%A2%E6%9C%89%E5%A4%A7%E5%93%A5/",
            "title": "游戏里面有大哥",
            "date_published": "2025-06-06T06:52:40.000Z",
            "content_html": "<p>我读小学那会儿《梦幻西游》还很火，我和班上的两个好朋友选了一个区，并不约而同选择了剑侠客这个角色，原因就一个字，帅。<br />\n他们俩一个叫飞天小剑侠，一个叫飞天小剑仙，他们一定让我叫飞天小剑神，我果断拒绝了。真是开玩笑，这么 low 的名字岂能入我法眼，像我这么有深度的人必须配个更有深度的名字才行。<br />\n所以我取了 “逍遥剑客 008” 这个高端大气上档次的名字。<br />\n也正因如此，我早到了排挤。在游戏里做什么都是他们俩一起，而我却孤独一人。我问他们为什么不肯带我一起，他们说：“我们飞天派不欢迎你们逍遥派。“我一气之下又建了 001 到 004 四个逍遥剑客，自己和自己玩。直到小剑仙和小剑侠已经 30 级在大雁塔六层叱咤风云，还只有 20 级的我仍带着四个小号在东海湾组队抓鳖。我很不开心，因为他俩总和我吹嘘他们在大雁塔抓到了神兽泡泡，爆到了神奇金背大砍刀，我说你们也带我去瞅瞅呗！“你等级太低，会死的。” 他们摇了摇头说。<br />\n一气之下我决定自己爬大雁塔。然而在第五层我和一直羊头怪陷入了苦战，通过吃药、召唤兽保护等一系列战术后我输了，好在以牺牲跟随我许久的海毛虫为代价成功逃跑。为了避免移动时碰到怪物触发战斗，我被迫站在原地不动，十分恐慌。我很担心我的逍遥剑客 008 如果死了，就真永远死了。其间我喊我的两个朋友来救我，他们正在别处与瑞兽酣战，说等空下来就来救我。于是整个早上，我战战兢兢地躲在大雁塔第五层的某个角落里等待救援。<br />\n就在我感到绝望之时，游戏里聊天用的小拳头突然亮了起来，一个陌生的 ID 发来一句消息：“你一个人在这干吗？我看你待了很久。” 陌生人的名字叫 “终结者 1998”，我看了下他的等级，87 级的剑侠客！你们能体会我当时的心情吗？就像李逍遥遇到酒剑仙、令狐冲遇到风清扬！“大哥！救救我！我打不过这些羊头怪！”<br />\n“终结者 1998 邀请你进入队伍”，这条系统消息犹如一根救命稻草，让我重新燃起来生命的希望。一个高等级的剑侠客，用我的门派技能，带我成功复仇，我们在大雁塔如履平地。看着之前那些嚣张跋扈的羊头怪在他面前变得不堪一击，终结者 1998，这个 ID 在我心中成了神一样的存在，蓝色衣服、黑色头发的剑侠客形象也瞬间变得高大威猛。<br />\n后来，他成了我的大哥。<br />\n我把逍遥剑客 001 到 004 无情地抛弃了，专心只练 008，并已成为终结者 1998 的小弟而自豪。他人很好，只要一上线就会带我扫塔，很快我的等级就赶上小剑仙和小剑侠。他俩感到不可思议，问我原因。“我有大哥带我！大雁塔六层的怪物根本撑不住他一回合！他还送了我一只神兽和好多把金背大砍刀！” 我唾沫横飞，说的他俩眼里放光，后来他们也成了终结者 1998 的小弟。<br />\n大哥话很少，而只要我们问他可不可以带我们抓鬼扫塔的时候，他一定直接回个：“好，CAFF（集合点）”，然后把我们都邀请进队伍。组队期间也不太和我们主动说话，都是我们问什么他回答什么，我想，他应该是个很害羞的人。一次他带我们在北俱芦洲练级，把一件 50 级的头盔扔给我，我直接发在队伍频道里炫耀，小剑仙和小剑侠看到之后不乐意了，吵着说也想要。但后来没有再爆到这件装备，大哥只好去商会花钱买了两件给他们。那时候我觉得，他可真是个好人啊！<br />\n还有一次小剑侠和一个 100 多级的人发生争执，跑来何大哥诉苦，说他被人砍趴下了还掉了一把武器，大哥只好买了把新武器给他。作为大哥，他联系了那个 100 多级的人，询问他和小剑侠之间的恩怨。他说小剑侠骗了他小弟一只古代瑞兽，还嘴硬不承认，无奈之下只好 “教他做人”。大哥又问小剑侠是不是真的，小剑侠却抱怨他看对面等级高就连自己的小弟都不相信，真是认错了这个大哥，最后还是大哥花钱陪对方一只瑞兽才平息了风波。看着小剑侠在班里吹嘘他是如何骗到那只古代瑞兽的嘴脸，我实在没忍心告诉大哥真相。<br />\n我们三个的等级越来越高，而大哥因为一直带我们，自己升级很慢。熟悉了游戏以后，我们发现其实他的实力很一般，他所属的化生寺是辅助门派，并不能像输出门派那样风卷残云地打怪。后来，小剑侠和小剑仙换了更厉害的大哥跟随，只有我因为对大哥心存愧疚，还跟在他的身边。于是大哥又只带我一个人了，而我发现他打怪的速度越来越慢，做活动越来越吃力，渐渐地他在我心里也没有刚相遇时那般高大，我上线后的第一件事也不再是看他在不在。<br />\n一天他帮我做剧情任务，因为 NPC 太厉害打不过，打到最后召唤兽死了，他也已经没蓝化身为一个高级步兵。我只能趴在地板上替他加油，看着大哥被对面的 NPC 蹂躏，我喊了句：“大哥，你跑吧，我们一会儿买点药再来复仇。” 他无动于衷，靠普通攻击和怪物周旋，最终还是死了。我们在黑白无常面前重逢，他发给我 “不好意思” 几个字。<br />\n他常组满一堆小号带我抓鬼，队伍中经常会有人指责他带队速度慢、输出低，打一个血鬼的时间都能吃个西瓜，他从不回击，直到我离开队伍他才去忙自己的事。有次我忍不住问他：大哥，你为什么不和你同等级的人一起活动呢？“我太垃圾了，他们不组我。” 我突然觉得有点心酸，只好回个表情给他。<br />\n后来，他很长一段时间没有上线。直到有一天我上线看到小拳头亮了，点开一看是他的离线留言。他说他大学毕业了，以后应该没时间上线了，他把账号密码告诉了我，说上面有只变异的古代瑞兽是要送我的，化生号也送给我了，我可以随时玩。我登上他的账号，很一般的一个角色，并没有什么值钱的装备。看到召唤兽一栏有只蓝色的古代瑞兽，名字叫 “送给逍遥的”。<br />\n从此之后，大哥就活在了我的记忆里，成了我生命里的匆匆过客，没有带走一片云彩，却留下了一份感动。如今我已经大学毕业，游戏也早已戒了，他的号我只登过一次，因为第二次就忘了账号密码。不过我总是会想起大哥，想起终结者 1998 这个曾经仰望了很久的名字。父母经常和我说，游戏就像毒品，上瘾就完蛋。但是我觉得，游戏里也会遇到很多有意思的人，有时候虚拟世界可能比现实世界更温暖。这么多年过去了，我时常还会回想起那一天早上我在大雁塔五层面临绝望之时，出现在我面前的那个男人。</p>\n",
            "tags": [
                "文学",
                "摘录",
                "文学",
                "摘录",
                "文章"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/literature/transcribe/article/%E6%9C%89%E9%98%85%E8%AF%BB%E4%B9%A0%E6%83%AF%E6%89%8D%E5%8F%AF%E8%83%BD%E6%9C%89%E4%BC%98%E5%8A%BF/",
            "url": "https://nocturne-tome.cn/literature/transcribe/article/%E6%9C%89%E9%98%85%E8%AF%BB%E4%B9%A0%E6%83%AF%E6%89%8D%E5%8F%AF%E8%83%BD%E6%9C%89%E4%BC%98%E5%8A%BF/",
            "title": "有阅读习惯才可能有优势",
            "date_published": "2025-06-06T06:51:38.000Z",
            "content_html": "<div align=\"center\">吴非</div>\n<p>在课堂面对学生，我有时会想象着他们未来在社会上的姿态。再过二三十年，当他们回顾中学时代时，会有哪些遗憾，会有那些庆幸呢？<br />\n和毕业多年的学生谈阅读，我们话语交叉部分不是很大，除了专业背景因素，也有趣味的不同。但我不解的是，它们对子女教育的判断有些是违背常识的，和我当年对他们的教育不一样。这就是说，我当年教学的价值是有限的。他们直言：老师教我们时，家庭对孩子教育基本是听学校的；现在家长 QQ 群里的危言耸听，让我们只能 “从众”，听老师的则是冒险了；老师说 “最重要的是阅读趣味和习惯”，可是孩子一次测试少考几分，从任课老师到班主任，都会给孩子施压，而少读两本课外书，对学习不会有影响。<br />\n不能不说，一些教师和家长认定的 “尖子” 其实不过是考试机器。目前的考试制度造就了一大批这种没有阅读兴趣的，缺乏对事物的正确认识能力，却善于利用考试模式取得各种证书或文凭的精神白痴。在中学招生咨询处，常能看到家长摊开一堆五花八门的证书，喋喋不休地讲述孩子如何优秀，旁边站着一名表情呆滞的孩子。<br />\n有大学教授叹息，高分录取进来的文科大学生，文学知识和历史知识往往是空白，甚至不如社会上的一般人；他们所知道的教授或作家，至多是中小学课文的作者，除此以外，几乎说不出任何一部作品；如果问他最佩服哪位学者，他会想一想，说 “余秋雨”“季羡林”。这可能已经是他的全部，你肯定不敢再问了，再问就要闹笑话。<br />\n应当在中小学阅读的东西，到了大学或走上社会后再去补，一是不可能，二是失去价值意义。读书是一种习惯，至于怎么读？到了中学，特别是高中，其实已经不需要教。如果学生在幼没有养成阅读的兴趣，到了中学，用反复强调或考试施加压力，作用有限，甚至适得其反。<br />\n目前最困难的，是社会（也包括学校）误把 “阅读” 当做 “语文” 的教学内容，而没有认识到它是所有学科学习的基础能力。“学好数理化，走遍天下都不怕” 的粗鄙，造成了恶俗不堪的社会物质。学生看到，这个社会，不阅读的人也生活的非常愉快，在学校，那些没有阅读积累的人，也照样能胜任高中应试教学，没有文学阅读经历，没有审美经验，不影响他（或她）在这个社会如鱼得水。<br />\n课堂走出了高考高分的学生，但他们的阅读能力并没有达到建设文明社会需要的水平，这种规格的劳动者能适应生产线的需要，但是他们缺少想象力和好奇心，缺乏能够发展这个国家的创造精神。<br />\n学生只要放弃为克服恐惧的 “补习”，每周就能省出一天或半天的时间，如果他们因此养成了自由阅读的习惯，两年下来，他的阅读可能比热衷恶性补习的同学高出五倍到十倍，甚至更多（因为相当一部分学生根本不阅读）。<br />\n文明教育中长大的学生，自幼接触美好的故事，广泛的阅读滋养了好奇心和想象力，他们总是能睁大眼睛观察世界，对新鲜事物怀着惊喜。他们在阅读时，能想象出场景画面，判断事物内部的联系，推导出可能发生的事，形象思维和逻辑思维互相使用、推进，美好的故事抚慰着心灵，他经常能从阅读中获得启示，自我激励，逐渐获得 “境界”。<br />\n阅读基础好的学生，克服困难的能力显然不同一般，他获得知识和经验的能力超越一般人。因为有阅读做向导，他的精神通道可以通往无限的时空。</p>\n",
            "tags": [
                "文学",
                "摘录",
                "文学",
                "摘录",
                "文章"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/literature/transcribe/article/%E4%B8%91%E5%A8%98/",
            "url": "https://nocturne-tome.cn/literature/transcribe/article/%E4%B8%91%E5%A8%98/",
            "title": "丑娘",
            "date_published": "2025-06-03T09:15:06.000Z",
            "content_html": "<p>我娘从小就很不幸，12 岁那年上山砍柴时摔断了右腿又碰上了一个乡村庸医，不但没治好腿，还落下了终生残疾。我娘家里的生活非常困难，娘没有享过一天的福，一直苦做苦撑着，所以成年后，娘的身体依然很是瘦小单薄，加上鼻子眼睛长得不是很端庄，大家都叫她 “丑女”，岁数很大了还是没有人上门提亲，直到他 26 岁那年，才在别人的撮合下与出身不好的我爹成了亲。<br />\n我的出生让我娘感到特别高兴，整天抱着我在村子里走来走去，因此，大家又改口揶揄她为 “丑娘”。因为她既丑又瘸，别人都看不起她，可在我的孩提时代，我一点都不觉得她丑，到认为她是天底下最好的娘。娘给我做最好吃的东西，给我穿最漂亮的衣服，夏夜摇着蒲扇给我驱蚊招凉，冬天搂着我睡觉，娘待我好，我也对她亲，跟她说笑，扑在她怀里撒娇。知道娘长得丑是在我 9 岁那年。一天，隔壁王家打死了我娘养的一只大母鸡，母鸡是我娘准备给我交学费用的。娘很生气，就上前理论。王家的女主人一点也没把娘放在眼里，冷笑着讽刺娘：“你这个丑八怪，也不照照镜子看看自己长得什么模样……” 站在一旁的人们都嘻嘻哈哈地笑起来，娘招架不住，一屁股坐在地上哭叫起来，反而招来了一阵大笑，我觉得很没面子，仔细打量娘，觉得她是有点丑，于是我流着眼泪跑开了。<br />\n这之后，娘依旧待我好，但我对她不亲了，她要来楼我抱我，我就泥鳅似的躲开，即使她去赶集，我也不再屁颠儿屁颠儿地跟着去了。我躲她哩，我还怨她呢，怨她为什么长得这么丑，让我也跟着丢人，被人瞧不起。在外面，我只说爹，从来不说娘，路上碰到她，就远远地躲开，如果实在躲不了了，就埋着头跑过去，任她追在后面怎么叫我也不理睬。娘后来知道了我的心思，在家里偷偷地抹了一天的眼泪，为了不让人知道我有一个丑娘，我特意让爹把我送到外村的学校。所以在学校里，很多同学都以为我是一个没有娘的孩子。<br />\n后来不知怎的，有同学开始在班里宣传我有一个瘸腿的娘，我拼命地矢口否认。真是凑巧，那天放学，正好娘在学校附近拣猪草，那同学好似发现新大陆一样地大叫：“瞧，这就是他娘！” 我赶紧说：“别听他胡说，她不是我娘，我娘到城里走亲戚了。” 那同学不知怎么会想出这么一个点子，他说：“你如果学她的模样走几步路，我们才肯相信你的话。” 没办法，我只好学着娘的模样一瘸一拐地走了几步，娘被这边的吵闹声惊动，扭过头正好看到我，她身子猛然一抖，眼睛里闪着泪光，匆匆地走开了。<br />\n那一次我把娘的心给伤透了，她回到家里时，眼睛都有点哭肿了，爹就把我捆起来吊在屋梁上狠狠地揍了一顿，没过几天，我也找了个理由把那个同学结结实实地揍了一顿。<br />\n其实我这样对亲娘，心里也很不好受，人常说 “儿不嫌母丑，狗不嫌家贫”，但不管怎么说，我还是不能接受娘的既丑又瘸。我就用功读书，决心一定要考上大学，最后到外面工作，离开家。<br />\n在外求学的四年里，我只回了两次家，都是匆匆而来，又匆匆而去。我回来后，看得出娘高兴，但又不敢亲近我，在我和爹坐在灯下说话的时候，他远远地坐在灶头边，偷偷地瞄我一眼，又埋下头烧水。已经落实了毕业去向即将去报道的时间里，我又回去了一次，这一次，娘显得特别伤感。她知道我工作以后，回家的次数会越来越少了。临走前，我突然感到自己是那么的孤独，也对娘充满了愧疚之情，我在娘面前跪下结结实实的磕了三个头，叫了一声：“娘 ——”<br />\n 工作后三年没有回家，工作忙只是一个借口，每次收到爹写来的信，告诉我娘的身体每况愈下的情况，我都要大哭一场。第四年我谈了个女朋友，决定一定要带她回家探亲，让娘看看她未来的儿媳妇，好好地高兴一下。临行前，我给家里写了一封信。<br />\n可当我们赶到家时，只有爹一个人，爹说前两天娘到外县走亲戚去了。我立即打电话给表婶，问娘在不在，表婶说没见我娘来。握着电话，我的泪水哗哗往下淌。我明白，娘是在躲我哩，她怕她的丑她的瘸让我丢脸，吓走我的女朋友。娘，你到底在哪里，你这又是何苦呢…… 那次我没见着娘，我没想到从此以后我再也没有机会见到我娘了。<br />\n我成家后，不知多少次让爹和娘来家里住一阵，爹来了几次，娘却一次没有来。我知道娘伤透的心是一时缓不过来的。<br />\n后来那年的秋天，娘去世了。我赶回去时，娘已经穿戴上寿衣正要下棺。<br />\n我跪在她面前，摸着她的脸撕心裂肺地叫：“娘，娘……” 可是已经晚了，娘不能在回答我了。<br />\n娘知道自己丑，从来没有照过相，活了一辈子呐，连一张照片都没有。娘，你真的就不留一点痕迹，不给我一点点想头？</p>\n",
            "tags": [
                "文学",
                "摘录",
                "文学",
                "摘录",
                "文章"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/literature/transcribe/sentence/",
            "url": "https://nocturne-tome.cn/literature/transcribe/sentence/",
            "title": "短句",
            "date_published": "2025-05-04T14:21:42.000Z",
            "content_html": "<h1 id=\"感悟\"><a class=\"anchor\" href=\"#感悟\">#</a> 感悟</h1>\n<blockquote>\n<p>朝闻道，夕可死矣。</p>\n<p>—— 《论语・里仁》</p>\n</blockquote>\n<blockquote>\n<p>我特别喜欢这样去精英化的叙事，贴一段感悟</p>\n<p>打开社交平台，看着各式的年终报告。人们还在为着那些话题争吵，光鲜的表演走秀，激化的性别矛盾，狂热的教徒朝拜着虚伪的神，等待着他汲取自己的血肉，然后在某个时刻，用指尖敲出的怒火焚毁亲自筑建起的赛博庙宇，转头奔向其他的神祇，循环往复。</p>\n<p>当我从喧闹的网络回廊抽身出来时，才发觉，当欲望的潮汐退潮以后，世界还有真实的另一面。</p>\n<p>看房的中介小哥抱怨如今生意业务难做，有时一天跨越几个城区难有一单，言谈间还得观察四周，提醒坐在电瓶车后座的我注意下个路口是否有交警的的身影；深夜加班回来的路上，滴滴师傅略带委屈地告知，在接到这单的时候，他的炒粉丝刚下锅，但愿他赶到的时候，老板还能留个荷包蛋；地铁里化着精致妆的姑娘低头啜泣时，面对递上的纸巾，感谢中带着歉意，解释道最近过的实在不顺意。</p>\n<p>人们说这世界只是草台班子，你要学会对光环怯魅，穿梭在夜晚高耸的写字楼间，借着霓虹错落的灯光，望着属于我的格子间，那个位置，一定看不到星星吧。</p>\n<p>危楼纵使高百尺，难寻年少觉得星可摘的少年郎了</p>\n<p>在那些无名沉寂的日子里，我逐渐发现，能穿越岁月风雨和抵御荒芜的，唯有内心的从容和坚定。</p>\n<p>不要急着走进谁的生活，也不要固守谁的身影。就算身边的朋友纷纷交卷步入了人生下一阶段，请依然记得今天将新的歌曲加入歌单。可以抗拒一部分世故人情，却也要学会打磨自己，重剑无锋，大巧不工。学会为形势近况担忧，但也时刻告诫自己失势依旧要守，待时机熟透。</p>\n<p>永远不要失去感受真实的力量。靓丽的聚光灯下总会滋生欲念的阴影，怒涛奔涌的长夜里亦有航船的微光。辉煌的楼宇与老旧的房屋都见证过相同的汗水；图书馆的通明与街摊的微光都承载着同等重量的梦想。</p>\n<p>生活是一幕盛大且荒诞的戏剧，即使拿着错误的剧本，演绎着荒唐的段落，当散场落幕时，面对无人问津的座席，依然要低头致意。</p>\n<p>真理无穷，道阻且长。譬如平地，虽覆一篑，进，吾往也。与大家共勉！</p>\n<p>——b 站 | 二流侦探今日子与猫</p>\n</blockquote>\n<blockquote>\n<p>我始终觉得幸福对大部分人来说都是很遥远的词汇，我所能做的只有通过单薄的文字来传达我的善意。我想向你表达 “希望与我沟通的你能够通过交谈获得一瞬的开心”。这样小小的喜悦或许能够让你拥有好心情。</p>\n<p>—— 可话 | 販賣日落</p>\n</blockquote>\n<blockquote>\n<p>“看吧，你又在逃避了。只把快乐的事情像念珠那样串在一起是没办法活下去的，尤其是我。”<br />\n“我再也不会为了那个不响的电话感到在意和焦虑了，因为我收到了你的心意。”</p>\n<p>——《Eva》</p>\n</blockquote>\n<blockquote>\n<p>常常有人问：“如果注定要离别，那相遇的意义是什么？” 今天看见这样一个回答：“被你改变的那部分我，代替你留在我身边。”<br />\n 认真理解这句话后，我愣住，随即落泪。人和人相遇又离别，总会有某些性格因彼此而改变，至少，记忆会改变，而改变的那一部分，逐渐融于我、属于我，最终形成新的我，或者说，这才是真正的我。所以，不要害怕离别，因为一旦相遇，我便永远拥有你。<br />\n—— 可话・念 04</p>\n</blockquote>\n<blockquote>\n<p>你不明白，升上初中之后，除了功课之外，你不明白的事情突然多了不少。<br />\n你回到教室座位上，内心开始感到忐忑不安。你心想 —— 啊，又来了。一旦遇到你不明白的事，你便感到极度不安。再这样继续下去的话，到最后恐怕会变成一无所知的人吧。就算一无所知，还是可以长成大人吧！难道所有的大人人都没有不明白的事情吗？<br />\n——<br />\n 我认为所谓真正的朋友，即使不在身边也不会感到寂寞，那才算是朋友。<br />\n——<br />\n“既然这样的话，那由香呢？她不是你的朋友吗？”<br />\n“由香就是由香。”<br />\n“可是……”<br />\n“她并不属于任何人。我也是如此。”<br />\n——<br />\n 惠美依然面不改色，她慢慢抬起头望着天空。<br />\n“因为我不喜欢用‘大家’这个词。如果那么在意‘大家’的话，就绝对不是朋友。”<br />\n 她突然说了这么一句。没有直接回答你的问题，而冒出非常唐突的一句话，不过，令人感到不可思议的是，它却深深打动了你的心。<br />\n“西村同学，你属于那种希望拥有很多朋友的人吧？”<br />\n 在你尚未回答之前，惠美又说：“我跟你不一样，就算不在身边，一辈子也忘不了的朋友，我认为只要有一个就够了。”<br />\n 她指的大概就是由香吧！<br />\n“因为一辈子都忘不了，所以希望留下很多的回忆。” 惠美把视线从天空拉回到你身上，继续说。<br />\n“所以…… 我才没有闲工夫跟‘大家’来往。”<br />\n 惠美的眼神让你感到心虚，你只好抬头望着天空。<br />\n只见蓝色的天空中漂浮着一朵小小的白云。<br />\n——<br />\n 看来的确有些竞赛只录取一个名额。<br />\n——<br />\n“相信你们总有一天会明白，未来的路还很漫长是多么幸福的一件事。”<br />\n——<br />\n 真正令人感到悲伤难过的，并不是留下伤心的回忆。最可悲的应该是完全没有留下任何回忆才对。<br />\n现在的我是幸福的，你想。<br />\n——<br />\n“到最后并不是个性合不合得来的问题。拄着拐杖的我和动作慢吞吞的由香，我们走路的速度刚好是一致的。”<br />\n—— 重松清・《你的朋友》</p>\n</blockquote>\n<blockquote>\n<p>在《当尼采哭泣》中尼采与布雷尔有这样一段关于爱情和友谊的对话格外地符合我的心境:<br />\n“我所梦想的爱情，不只是两个人渴望于拥有彼此。不久之前，我一度以为我找到了爱情，但是我弄错了。”<br />\n“发生了什么事？”<br />\n 考虑到尼采在微微地摇着他的头，布雷尔并没有压迫他。他们一道走着，直到尼采再次拾起话头：“我所梦想的一种爱情，是两个人共享一种共同追求某种更高层次真理的热情。或许我不应该称呼它为爱情，或许，它真正的名字是友谊。”</p>\n</blockquote>\n<blockquote>\n<p>事实上，机场比婚礼殿堂见证了更多真挚的亲吻，医院的墙壁比教堂聆听了更多的祷告，教室的课桌刻着比海深的情话。人说，林深时见鹿，海蓝时见鲸，梦醒时见你。可实际，林深时雾起，海蓝时浪涌，梦醒时也许未见鹿，未见鲸，亦未见你。但是，鹿踏雾而来，鲸随浪儿起，你没回头，又怎知我没来过。</p>\n</blockquote>\n<blockquote>\n<p>我从小到大都不是接受过太多别人善意的人，但我敏感内耗还是讨好型人格，所以我总是愿意无条件的去对别人付出我的善意，尽管从来没有回报。但这个冬天，山谷中我无意间的呐喊，却爆发出了巨大的回音。我第一次真的想要爱这个世界。<br />\n—— 小红书｜两眼一睁就是睁</p>\n</blockquote>\n<blockquote>\n<p>白云苍狗，世事变迁。失去的，错过的，迟到的，充斥着我们的生活，只是时光易逝、韶华易逝、美好易逝。若执着于细枝末节，便辜负了远方的风景，辜负了匆匆年华。也需要等到赏过各种风景之后，才愿脱下红尘华服，细数平淡里的落花流水，以随遇而安的姿态，拥抱前程的美好。</p>\n</blockquote>\n<h1 id=\"梦想\"><a class=\"anchor\" href=\"#梦想\">#</a> 梦想</h1>\n<blockquote>\n<p>我有一个梦想，将来的某一天，大家都能玩到蕴含着中国上下五千年本土文化的优质游戏大作。我有一个梦想，有一天，西游记能出 ACT，让老外去体会中国文化西游记中 ' 斗战胜佛’的打击快感，那一定比西方的动作巅峰之作《战神》《鬼泣》更加深邃。我有一个梦想，有一天，上海滩能出沙盒游戏。而不是玩《GTA》感受美国梦，亦或是玩着《热血无赖》体验国外公司强行塞给我们的 ' 中国文化’。</p>\n<p>我有一个梦想，有一天，不少 3A 大作不需要汉化，因为是我们自己的游戏，配音是中文，文化也是中国的。我有一个梦想，将来的某一天，国产游戏能像中国的其他产业一样，以一个领跑者的姿态，面对全世界，面对全宇宙，器宇轩昂，扬眉吐气。</p>\n<p>这会是由我们一起去完成的梦想。我等着我们的好消息。</p>\n<p>—— 浅墨_毛星云</p>\n</blockquote>\n<blockquote>\n<p>刘老师既不喜欢学生，也不喜欢教书，他在这里执教，只是帮助已经过世的女友实现她生前未能实现的梦想 —— 成为这所学校的一名教师。也不知是女友的遗愿，还是他自己的主张，他将女友的骨灰与石灰混合，做成了粉笔，用它来向学生们传递知识，今天上课的时候，最后一支粉笔也用完了，该走了。</p>\n<p>或许这不告而别，对学生和他自己来说，都是好事。</p>\n<p>——《你已经猜到结局了吗》</p>\n</blockquote>\n<h1 id=\"歌词\"><a class=\"anchor\" href=\"#歌词\">#</a> 歌词</h1>\n<blockquote>\n<p>提取梦里的碎片<br />\n温习着两人的画面<br />\n轻轻靠近你又一点点<br />\n立刻就消失不见</p>\n<p>—— 深海鱼子酱・《千千万万》</p>\n</blockquote>\n<blockquote>\n<p>巷口灯光忽明忽灭<br />\n手中甜咖啡已冷却<br />\n嘴角不经意泄露想念<br />\n在发呆的窗前凝结</p>\n<p>故事里的最后一页<br />\n过往和光阴都重叠<br />\n我用尽所有字眼去描写<br />\n无法留你片刻停歇<br />\n —— 司南・《冬眠》</p>\n</blockquote>\n",
            "tags": [
                "文学",
                "摘录",
                "文学",
                "摘录",
                "短句"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/literature/writings/%E5%BE%80%E4%BA%8B%E5%A6%82%E7%83%9F/",
            "url": "https://nocturne-tome.cn/literature/writings/%E5%BE%80%E4%BA%8B%E5%A6%82%E7%83%9F/",
            "title": "往事如烟",
            "date_published": "2025-03-24T13:52:19.000Z",
            "content_html": "<h1 id=\"序\"><a class=\"anchor\" href=\"#序\">#</a> 序</h1>\n<p>“林夕，林夕……”<br />\n 好像有人在喊我的名字。<br />\n“林夕，快醒醒。”<br />\n 不，不要推我，我不想回去。<br />\n“你不要丢下我一个人……”<br />\n 是谁，在哭？<br />\n嗡…… 四周都安静了。</p>\n<p>我缓缓睁开眼睛，刺眼的灯光，一阵眩晕，白色的天花板，朴实无华。紧接着我看到了一张稚嫩的脸。<br />\n是筱筱。<br />\n我木然地坐了起来。</p>\n<p>“你看看你都睡多久了？” 她鼓着嘴，指着一旁的挂式日历，上面的 22、23 和 24 号各画着一个醒目的 “×”。<br />\n“我都守在这里三天三夜…… 哎，你怎么哭了？”<br />\n 才发现自己眼中噙满了泪水。<br />\n“不，没什么，只是累了……” 我赶紧低下头，擦去眼泪，企图掩饰。<br />\n她突然冲过来，把头埋进我的怀里，呜呜地哭了。<br />\n“还好你醒了，我真担心你去了回不来，就像陈老师说的那样……”<br />\n 我有点不知所措，但好在很快就适应了。<br />\n“小傻瓜，我现在不是好好的嘛。” 我摸摸她的头，微笑着说。<br />\n在任她哭诉了十分钟，并细数了我的 “十大罪状” 后，看她的情绪逐步稳定下来，我开口了：<br />\n“对了，人类的记忆，我拿回来了，你想看吗？”<br />\n 她探出脑袋，轻轻地点了点头。<br />\n我将她的身子扶正，然后戴上了一旁的脑神经装置【brain2.0】。<br />\n紧接着，我们身边的画面开始模糊，周围的事物都在快速向后退去，我拉住了筱筱的手。<br />\n在一片强烈的白光过后，我们置身于一所学府，哦不，是一所大学的校园里。<br />\n此刻我们正站在一栋建筑物的最高处，从这里可以俯瞰整座大学的风景。</p>\n<p>“哇，这就是历史书里说的大学吗？真美呀！” 筱筱激动地环顾着周围的一切。<br />\n我多久没见过丫头这般朝气了呢？粗算应该也有五年了吧，自 “禁令” 颁布以来……<br />\n 我的脸沉下来，思绪被拉回到混沌元年。</p>\n<h1 id=\"缘起\"><a class=\"anchor\" href=\"#缘起\">#</a> 缘起</h1>\n<p>“学生的天职就是学习，其他一切都是教育的毒瘤！”<br />\n 公元 2110 年，【囚牢政变】爆发，【独裁者】上台，随之而来的还有【杀毒行动】。<br />\n短短几天，所有人脑植芯片里的内置文件都被【母核】篡改，大学变成了学府，而学生们则成了只会学习的机器。<br />\n在政变中幸存下来的人们组成了【救世者】，一面躲避着外界的追捕，一面谋划着反击计划。<br />\n将筱筱和我救下的陈老师，就是【救世者】的一员。<br />\n后来我们就被安置在了这里 ——Eden。</p>\n<p>Eden 断绝了与外界的一切联系，通信只能采用最原始的局域网技术（其实局域网早已被时代所淘汰了，不知道陈老师从哪里找到的古籍上记载了这种古老的技术，因此被应用上了）。<br />\n由于内置芯片随时都有被污染和发现的风险，所以他将我们体内的芯片都移除了。<br />\n但是这样带来了新的问题 —— 我们的知识储备全没了，于是他拿起了纸质书，重新给我们传授知识。</p>\n<p>【方舟】是目前【救世者】们正在实行的主流计划，主要是通过收集从前的记忆来唤醒沉睡的人类。但具体实施方案不详，陈老师并没有告诉我们。<br />\n目前摆在【救世者】前面的主要问题是技术停滞：【载具】的往返技术尚不成熟，导致了主要核心设备的 version 还停留在 0.35。<br />\n【载具】就摆在 Eden 中央最显眼的地方，只不过计划启动前它还只是一堆无用的钢铁。<br />\n但这并不妨碍我们的遐想。<br />\n课余时间我们总是趴在【载具】的玻璃罩上，好奇地盯着空无一物的平台，仿佛我们可以把时间望穿，让历史书上的画面降临在眼前。<br />\n四年以来一直如此。</p>\n<p>不久前外界加大了对幸存者的搜查力度，形势开始严峻起来。<br />\n在那段时间里，我经常能看到陈老师在屋内踱步，表情十分凝重。<br />\n直到有一天，陈老师把我们拉到地下室，正色道：“孩子们，如果未来的某一天我突然消失了，请不要害怕，你们一定要赶快启动【方舟】计划。我现在就将这个计划的全部内容告诉你们。”<br />\n 我看着他的眼睛，里面除了平时的坚定和严肃，还多了一丝恐惧。</p>\n<h1 id=\"存在于历史中的美好\"><a class=\"anchor\" href=\"#存在于历史中的美好\">#</a> 存在于历史中的美好</h1>\n<p>我摇摇头，试图将脑袋里的一切都赶走，现在应该专注于眼前的事情。<br />\n“走吧，我带你去看更有趣的东西！” 我拉起筱筱的手，快步向楼下移动。</p>\n<p>穿过林荫小道时，抬头看阳光穿过树叶的缝隙，在和光同尘的丁达尔效应中，驻足聆听鸟儿欢快的歌声；<br />\n在湖心亭里闲谈，看绒白的天鹅以优雅的泳姿，向我们展示自己的高贵，于波光粼粼的春水中，漾起阵阵清波；<br />\n途经古朴的石桥，忽见下面许多猫咪在懒洋洋地晒着太阳，学生们围成一团争抢着给它们投食（筱筱表示很想去挠挠它们的肚子但被我制止了）。<br />\n趴在教学楼外的窗户上，假装认真听课，实则被高等数学搞得头晕，却醉心于浓郁认真的课堂氛围；<br />\n小心翼翼地走进乐堂，在整体基调为金黄的肃穆中，惊叹于气势恢宏的乐队演奏，接受着公元世纪古典音乐的洗礼；<br />\n坐上大礼堂的红丝绒座椅，在帷幕开合之间，领略了莎士比亚的不朽话剧，也为梁山伯与祝英台留下了惋惜的泪水；<br />\n倚靠着图书馆的宽厚书架，遨游于浩如烟海的书籍中，与数千年人类文明史上的大家们纵情畅谈，感受人类文明的生生不息。<br />\n……</p>\n<p>最后我们来到了一片紫色的花海前，穿着素白长裙的筱筱此刻就站在花丛中央。<br />\n起风了，薰衣草顺势倒向一边，仿佛在为她让出舞台，裙摆在微风的抚摸下逐渐润化，变得柔软又蓬松，扎起的马尾辫被轻轻卸下，蜕出的长发随风舞动。<br />\n我看的入了迷，仿佛我们就置身于公元世纪的农村田园，正是出自那位名叫宫崎骏的画师之手。<br />\n“这就是公元人的浪漫啊！”<br />\n 我躺在山丘上，闭上眼睛感受这美妙的一切，任凭风儿夹带着薰衣草的芬芳扑面而来。</p>\n<p>再次睁开眼时，发现筱筱已经蹲在我面前，那双天真无邪的大眼睛直视着我。<br />\n“你在想什么呢？” 她说，眼里满是好奇。<br />\n“没啥”，我支起身子，“我们该回去了，时间不早了。” 然后站起来拍了拍裤子。<br />\n她也站起来，噘起嘴，忸怩着身子，许久才吐出了一句 “好吧～”，仿佛在表示她的极不情愿。<br />\n我明白，我也不愿意离开，这里的美好，是外面世界无法比拟的。<br />\n远离了现实的喧嚣，没有了金属的厚重感，一切都是历史和自然的沉淀，一切都在向我们展示着人文的气息。<br />\n但同时我也清楚，在这里呆的越久，就越容易产生依赖，最后深陷其中，无法自拔……<br />\n 我看着她的脸，在心里说：我们一定还会回来的，那时候就不用离开了。</p>\n<p>我拉起她的手，再次穿过了白光。</p>\n<h1 id=\"启程\"><a class=\"anchor\" href=\"#启程\">#</a> 启程</h1>\n<p>“走吧。” 我边说边按下了 Eden 的自毁按钮，确认三次后输入了最高权限。<br />\n她愣在原地，眼中透出一丝空洞。<br />\n“不用悲伤，等我们毁掉【母核】，重新归还记忆后，人类就会有更多更舒适的【家】了。”<br />\n“那…… 我先出去等你，我怕我受不了。” 她轻轻地点了一下头，转身径直走了出去。</p>\n<p>数据开始解构，实物已经坍塌，不一会儿房间里就空无一物，除了最外围的框架，1 字节都没有剩下。<br />\n“再见了，老朋友。” 我最后看了 Eden 一眼，然后转身跟上筱筱的脚步，向着眼前矗立于云霄之间的学府走去。</p>\n",
            "tags": [
                "文学",
                "写作",
                "文学",
                "写作",
                "文章"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/painting/pixel-art/aseprite/simple-exercise/",
            "url": "https://nocturne-tome.cn/painting/pixel-art/aseprite/simple-exercise/",
            "title": "简单练习",
            "date_published": "2025-03-02T15:50:56.000Z",
            "content_html": "<h1 id=\"临摹学习\"><a class=\"anchor\" href=\"#临摹学习\">#</a> 临摹学习</h1>\n<h2 id=\"2025-03-02简单人物-光影\"><a class=\"anchor\" href=\"#2025-03-02简单人物-光影\">#</a> 2025-03-02：简单人物 &amp; 光影</h2>\n<p><img loading=\"lazy\" data-src=\"character.png\" alt=\"\" width=\"400px\" /></p>\n<h2 id=\"2025-03-22简单形状-调色\"><a class=\"anchor\" href=\"#2025-03-22简单形状-调色\">#</a> 2025-03-22：简单形状 &amp; 调色</h2>\n<p><img loading=\"lazy\" data-src=\"tree.png\" alt=\"\" width=\"400px\" /></p>\n<h2 id=\"2025-03-29原型图\"><a class=\"anchor\" href=\"#2025-03-29原型图\">#</a> 2025-03-29：原型图</h2>\n<p><img loading=\"lazy\" data-src=\"prototype.png\" alt=\"\" width=\"400px\" /></p>\n<h2 id=\"2025-04-048-帧跑步\"><a class=\"anchor\" href=\"#2025-04-048-帧跑步\">#</a> 2025-04-04：8 帧跑步</h2>\n<p><img loading=\"lazy\" data-src=\"https://hexo-1317730660.cos.ap-nanjing.myqcloud.com/image/gif/first-run.gif\" alt=\"\" width=\"400px\" /></p>\n<h2 id=\"2025-04-06剑客挥刀-动态模糊\"><a class=\"anchor\" href=\"#2025-04-06剑客挥刀-动态模糊\">#</a> 2025-04-06：剑客挥刀 &amp; 动态模糊</h2>\n<p><img loading=\"lazy\" data-src=\"https://hexo-1317730660.cos.ap-nanjing.myqcloud.com/image/gif/swordsman.gif\" alt=\"\" width=\"400px\" /></p>\n<h2 id=\"2025-04-10鸟挥动翅膀-部位分解\"><a class=\"anchor\" href=\"#2025-04-10鸟挥动翅膀-部位分解\">#</a> 2025-04-10：鸟挥动翅膀 &amp; 部位分解</h2>\n<p><img loading=\"lazy\" data-src=\"https://hexo-1317730660.cos.ap-nanjing.myqcloud.com/image/gif/bird.gif\" alt=\"\" width=\"400px\" /></p>\n<h2 id=\"2025-04-13房屋-细节处理\"><a class=\"anchor\" href=\"#2025-04-13房屋-细节处理\">#</a> 2025-04-13：房屋 &amp; 细节处理</h2>\n<p><img loading=\"lazy\" data-src=\"house.png\" alt=\"\" width=\"400px\" /></p>\n",
            "tags": [
                "绘画",
                "像素画",
                "Aseprite学习",
                "绘画",
                "像素画",
                "Aseprite学习"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/game-development/game-maker/GM-dev-problem-record/",
            "url": "https://nocturne-tome.cn/game-development/game-maker/GM-dev-problem-record/",
            "title": "GM开发问题记录",
            "date_published": "2025-02-14T16:14:09.000Z",
            "content_html": "<h1 id=\"绘制中文不显示\"><a class=\"anchor\" href=\"#绘制中文不显示\">#</a> 绘制中文不显示</h1>\n<h2 id=\"现象\"><a class=\"anchor\" href=\"#现象\">#</a> 现象</h2>\n<p>刚开始使用 GM 的时候，需要在文本框里面输出对话（即在 draw_GUI 中调用 draw_text_ext 方法）。</p>\n<p>英文正常显示，换成中文就不显示了，会替换成空方框 (□)，如下所示：</p>\n<p><img loading=\"lazy\" data-src=\"%E4%B8%AD%E6%96%87%E4%B8%8D%E6%98%BE%E7%A4%BA.png\" alt=\"\" width=\"700px\" /></p>\n<h2 id=\"原因\"><a class=\"anchor\" href=\"#原因\">#</a> 原因</h2>\n<p>查阅资料发现由于没有添加中文的字符范围，所以对于没有的字符使用默认字符 □ 显示。</p>\n<h2 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h2>\n<ol>\n<li>在【编辑字体】页面中点击【Add】按钮。</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"%E4%BF%AE%E6%94%B9%E5%89%8D.png\" alt=\"\" width=\"700px\" /></p>\n<ol start=\"2\">\n<li>按先后顺序点击【From Code】和【Add Range】。</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"%E6%B7%BB%E5%8A%A0%E5%AD%97%E7%AC%A6%E8%8C%83%E5%9B%B4.png\" alt=\"\" width=\"700px\" /></p>\n<ol start=\"3\">\n<li>添加成功之后红色方框内会显示对应字符。</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"%E4%BF%AE%E6%94%B9%E5%90%8E.png\" alt=\"\" width=\"700px\" /></p>\n<h2 id=\"正常效果展示\"><a class=\"anchor\" href=\"#正常效果展示\">#</a> 正常效果展示</h2>\n<p><img loading=\"lazy\" data-src=\"%E6%AD%A3%E5%B8%B8%E5%B1%95%E7%A4%BA_%E4%B8%AD%E6%96%87%E4%B8%8D%E6%98%BE%E7%A4%BA.png\" alt=\"\" width=\"700px\" /></p>\n<h2 id=\"一些注意点\"><a class=\"anchor\" href=\"#一些注意点\">#</a> 一些注意点</h2>\n<ol>\n<li>\n<p>不能选择西文等一些不支持中文的字体。</p>\n</li>\n<li>\n<p>编辑页面右上角【Sample】不可选择的字体，就算支持中文，也无法正常显示（原因未知），宋体、微软雅黑均是。</p>\n</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"Sample%E4%B8%8D%E5%8F%AF%E9%80%89.png\" alt=\"\" width=\"700px\" /></p>\n<h1 id=\"碰撞问题\"><a class=\"anchor\" href=\"#碰撞问题\">#</a> 碰撞问题</h1>\n<h2 id=\"现象-2\"><a class=\"anchor\" href=\"#现象-2\">#</a> 现象</h2>\n<p>游戏中需要处理人物和物体之间的碰撞。<br />\n默认情况下 sprite 的碰撞形状都是覆盖全部范围长方形，为了实现真实的碰撞效果，我们往往需要修改 sprite 的 碰撞掩码（Collision Mask）。</p>\n<p>比如我下面这张图就是从 obj_player 进入 Collision Mask 配置项，并完成修改。</p>\n<p><img loading=\"lazy\" data-src=\"%E4%BB%8EObject%E8%BF%9B%E5%85%A5Mask.png\" alt=\"alt text\" width=\"700px\" /></p>\n<p>进入游戏测试发现人物向下走正常。</p>\n<p><img loading=\"lazy\" data-src=\"%E4%BA%BA%E7%89%A9%E5%90%91%E4%B8%8B%E7%A7%BB%E5%8A%A8%E6%AD%A3%E7%A1%AE.png\" alt=\"alt text\" width=\"300px\" /></p>\n<p>但是向上走的时候出问题了，正常情况这里应该是靠到主角的腰部才走不过去，现在头部就上不去了。</p>\n<p><img loading=\"lazy\" data-src=\"%E4%BA%BA%E7%89%A9%E5%90%91%E4%B8%8A%E7%A2%B0%E6%92%9E%E9%94%99%E8%AF%AF.png\" alt=\"alt text\" width=\"300px\" /></p>\n<h2 id=\"原因-2\"><a class=\"anchor\" href=\"#原因-2\">#</a> 原因</h2>\n<p>因为从 obj_player 进入修改的 sprite 是 obj 默认的图，也就是向下的待机图。但是向上走的时候换成了向上的行走图，改图没有修改，所以呈现这样的效果。</p>\n<p><img loading=\"lazy\" data-src=\"%E5%90%91%E4%B8%8A%E8%A1%8C%E8%B5%B0%E5%9B%BE_%E4%BF%AE%E6%94%B9%E5%89%8D.png\" alt=\"alt text\" width=\"700px\" /></p>\n<h2 id=\"解决方案-2\"><a class=\"anchor\" href=\"#解决方案-2\">#</a> 解决方案</h2>\n<p>修改所有与人物相关的图（上下左右、待机行走）的 Collision Mask 即可。</p>\n<p><img loading=\"lazy\" data-src=\"%E5%90%91%E4%B8%8A%E8%A1%8C%E8%B5%B0%E5%9B%BE_%E4%BF%AE%E6%94%B9%E5%90%8E.png\" alt=\"alt text\" width=\"700px\" /></p>\n<h2 id=\"正常效果展示-2\"><a class=\"anchor\" href=\"#正常效果展示-2\">#</a> 正常效果展示</h2>\n<p><img loading=\"lazy\" data-src=\"%E6%AD%A3%E5%B8%B8%E5%B1%95%E7%A4%BA_%E7%A2%B0%E6%92%9E%E9%97%AE%E9%A2%98.png\" alt=\"\" width=\"300px\" /></p>\n<h1 id=\"物体遮掩问题\"><a class=\"anchor\" href=\"#物体遮掩问题\">#</a> 物体遮掩问题</h1>\n<h2 id=\"现象-3\"><a class=\"anchor\" href=\"#现象-3\">#</a> 现象</h2>\n<p>在 rpg 游戏中，视角一般为俯视，所以会存在以下现象：</p>\n<ol>\n<li>物体重心在人物重心下方，物体遮挡人物。</li>\n<li>物体重心在人物重心上方，人物遮挡物体。</li>\n</ol>\n<p>如下图所示：</p>\n<p><img loading=\"lazy\" data-src=\"%E6%AD%A3%E5%B8%B8%E9%81%AE%E6%8C%A1%E6%95%88%E6%9E%9C.png\" alt=\"alt text\" width=\"700px\" /></p>\n<p>但在测试过程出现了这样的现象：</p>\n<p><img loading=\"lazy\" data-src=\"%E9%9D%9E%E6%AD%A3%E5%B8%B8%E9%81%AE%E6%8C%A1.png\" alt=\"alt text\" width=\"700px\" /></p>\n<h2 id=\"原因-3\"><a class=\"anchor\" href=\"#原因-3\">#</a> 原因</h2>\n<p>由于我设置过人物和物体 parent 的 depth 均为 -y 了，那只能是 sprite 的重心没有设置正确。</p>\n<h2 id=\"解决方案-3\"><a class=\"anchor\" href=\"#解决方案-3\">#</a> 解决方案</h2>\n<p>Origin 点用于设置重心，有如下规则：</p>\n<ol>\n<li>对于角色，将 Origin 点设置在角色的脚部，确保角色在移动和旋转时不会偏离地面。</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"%E4%BA%BA%E7%89%A9%E9%87%8D%E5%BF%83%E8%AE%BE%E7%BD%AE.png\" alt=\"alt text\" width=\"300px\" /></p>\n<ol start=\"2\">\n<li>对于物体，将 Origin 点设置在其重心位置。</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"%E7%89%A9%E4%BD%93%E9%87%8D%E5%BF%83%E8%AE%BE%E7%BD%AE.png\" alt=\"alt text\" width=\"500px\" /></p>\n<h2 id=\"正常效果展示-3\"><a class=\"anchor\" href=\"#正常效果展示-3\">#</a> 正常效果展示</h2>\n<p>（人物已处于房子后面）</p>\n<p><img loading=\"lazy\" data-src=\"%E6%AD%A3%E5%B8%B8%E5%B1%95%E7%A4%BA_%E7%89%A9%E4%BD%93%E9%81%AE%E6%8E%A9%E9%97%AE%E9%A2%98.png\" alt=\"alt text\" width=\"700px\" /></p>\n",
            "tags": [
                "游戏开发",
                "GAME_MAKER",
                "游戏开发",
                "GAME_MAKER"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/game-development/game-maker/the-first-game/",
            "url": "https://nocturne-tome.cn/game-development/game-maker/the-first-game/",
            "title": "第一款游戏",
            "date_published": "2025-01-26T10:43:26.000Z",
            "content_html": "<h1 id=\"教程项目体验地址\"><a class=\"anchor\" href=\"#教程项目体验地址\">#</a> 教程项目体验地址</h1>\n<p><a href=\"https://gx.games/games/czh5mc/my-first-rpg-game/tracks/413f97cc-5b7f-4f84-9d58-f973b75c2b15/\">My First RPG Game</a>（半成品）<br />\n<a href=\"https://gx.games/games/yrnjax/little-town-baiye/tracks/f12b0113-356d-4481-992b-de6fae6eb58b/\">Little Town - BaiYe</a>（有小 bug）</p>\n<h1 id=\"开发进度\"><a class=\"anchor\" href=\"#开发进度\">#</a> 开发进度</h1>\n<h2 id=\"2025-01-26新建文件夹\"><a class=\"anchor\" href=\"#2025-01-26新建文件夹\">#</a> <s>2025-01-26：新建文件夹</s></h2>\n<p><img loading=\"lazy\" data-src=\"%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9.png\" alt=\"\" width=\"700px\" /></p>\n<h2 id=\"2025-02-14更换-gamer-maker-开发学习中\"><a class=\"anchor\" href=\"#2025-02-14更换-gamer-maker-开发学习中\">#</a> 2025-02-14：更换 Gamer Maker 开发，学习中...</h2>\n<p><img loading=\"lazy\" data-src=\"%E5%B7%A5%E4%BD%9C%E5%8C%BA.png\" alt=\"\" width=\"700px\" /><br />\n<img loading=\"lazy\" data-src=\"%E6%B8%B8%E6%88%8F%E7%95%8C%E9%9D%A2.png\" alt=\"\" width=\"700px\" /></p>\n<h2 id=\"2025-03-02aseprite-学习中\"><a class=\"anchor\" href=\"#2025-03-02aseprite-学习中\">#</a> 2025-03-02：Aseprite 学习中...</h2>\n<p>详情可查看：<a href=\"/painting/pixel-art/aseprite/simple-exercise/\">简单练习</a></p>\n",
            "tags": [
                "游戏开发",
                "GAME_MAKER",
                "游戏开发",
                "GAME_MAKER"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/about/about-site/",
            "url": "https://nocturne-tome.cn/about/about-site/",
            "title": "关于本站",
            "date_published": "2024-12-17T03:33:49.000Z",
            "content_html": "<h1 id=\"关于本站\"><a class=\"anchor\" href=\"#关于本站\">#</a> 关于本站</h1>\n<p>记录自己的足迹，争取在后人赛博考古的时候能被发现。</p>\n<h1 id=\"关于作者\"><a class=\"anchor\" href=\"#关于作者\">#</a> 关于作者</h1>\n<p>平平无奇的 INFJ，喜欢与世无争，愿望是世界和平。</p>\n<h1 id=\"联系方式\"><a class=\"anchor\" href=\"#联系方式\">#</a> 联系方式</h1>\n<p>......</p>\n<!-- ![](QRCode.jpg){height=500px} -->\n",
            "tags": []
        },
        {
            "id": "https://nocturne-tome.cn/computer-science/programming/front-end/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "url": "https://nocturne-tome.cn/computer-science/programming/front-end/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "title": "代理服务器",
            "date_published": "2024-12-16T12:00:50.000Z",
            "content_html": "<p>在前端开发中，前端不直接与后端通信而使用代理服务器主要有以下几个原因：</p>\n<h1 id=\"解决跨域问题\"><a class=\"anchor\" href=\"#解决跨域问题\">#</a> <strong>解决跨域问题</strong></h1>\n<p>在浏览器中，出于安全考虑，存在同源策略限制。即协议、域名、端口号都相同的情况下，前端才能直接向后端发起请求，否则会被浏览器阻止。而使用代理服务器，前端可以将请求发送到代理服务器，代理服务器再将请求转发到后端，由于代理服务器和后端通常处于同一域或者不受同源策略限制，从而有效地解决了跨域问题。</p>\n<p>例如，前端应用部署在域名 <code>www.example.com</code> ，后端 API 服务部署在 <code>api.example2.com</code> ，直接从前端发起请求会被浏览器阻止。但如果设置一个代理服务器在 <code>www.example.com/proxy</code> ，前端将请求发送到这个代理地址，代理服务器再去请求 <code>api.example2.com</code> ，就可以绕过跨域限制。</p>\n<h1 id=\"提高安全性\"><a class=\"anchor\" href=\"#提高安全性\">#</a> <strong>提高安全性</strong></h1>\n<ol>\n<li>隐藏后端服务信息：\n<ul>\n<li>直接让前端与后端通信，可能会暴露后端服务器的 IP 地址、端口号以及具体的服务架构等信息，这会增加被攻击的风险。而通过代理服务器，前端只能看到代理服务器的地址，后端的具体信息得到了隐藏。</li>\n<li>例如，如果恶意攻击者知道了后端服务器的具体 IP 和端口，可能会尝试进行暴力破解密码、DDoS 攻击等恶意行为。但使用代理服务器后，攻击者只能看到代理服务器的信息，增加了攻击的难度。</li>\n</ul>\n</li>\n<li>过滤恶意请求：\n<ul>\n<li>代理服务器可以对前端发送过来的请求进行过滤和审查，拦截可能的恶意请求，如 SQL 注入、跨站脚本攻击（XSS）等，保护后端服务器免受攻击。</li>\n<li>比如，代理服务器可以检查请求参数中是否包含可疑的 SQL 关键字，如果有则拒绝转发该请求，从而防止 SQL 注入攻击到达后端数据库。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"负载均衡和缓存\"><a class=\"anchor\" href=\"#负载均衡和缓存\">#</a> <strong>负载均衡和缓存</strong></h1>\n<ol>\n<li>负载均衡：\n<ul>\n<li>当后端有多个服务器提供相同的服务时，代理服务器可以根据一定的策略将请求分发到不同的后端服务器上，实现负载均衡。这样可以避免单个后端服务器负载过高，提高系统的整体性能和可靠性。</li>\n<li>例如，代理服务器可以根据后端服务器的当前负载情况、响应时间等因素，动态地将请求分配到负载较轻的服务器上。</li>\n</ul>\n</li>\n<li>缓存：\n<ul>\n<li>代理服务器可以缓存经常被访问的数据，当下次有相同的请求时，直接返回缓存的数据，而不需要再次向后端服务器请求，从而提高响应速度，减轻后端服务器的压力。</li>\n<li>比如，对于一些不经常变化的数据，如商品列表、用户信息等，代理服务器可以将第一次请求得到的数据缓存起来，下次相同请求到来时直接从缓存中返回数据。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"便于开发和调试\"><a class=\"anchor\" href=\"#便于开发和调试\">#</a> <strong>便于开发和调试</strong></h1>\n<ol>\n<li>模拟后端环境：\n<ul>\n<li>在开发过程中，后端服务可能还不完善或者正在开发中，此时可以使用代理服务器来模拟后端的响应，使得前端开发可以独立进行，而不需要等待后端开发完成。</li>\n<li>例如，前端开发人员可以在代理服务器上设置一些固定的响应数据，来模拟不同的业务场景，以便进行前端功能的测试和调试。</li>\n</ul>\n</li>\n<li>统一接口：\n<ul>\n<li>不同的后端服务可能有不同的接口风格和规范，使用代理服务器可以对这些接口进行统一封装，使得前端只需要与代理服务器进行交互，简化了前端的开发。</li>\n<li>比如，后端有多个不同的微服务，每个微服务的接口可能都不一样，代理服务器可以将这些接口统一成一种标准的格式，提供给前端使用。</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "编程知识",
                "前端学习",
                "前端",
                "代理服务器"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/computer-science/programming/front-end/Mobx/",
            "url": "https://nocturne-tome.cn/computer-science/programming/front-end/Mobx/",
            "title": "Mobx",
            "date_published": "2024-12-16T11:23:09.000Z",
            "content_html": "<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<ul>\n<li><strong>mobx</strong>：\n<ul>\n<li><strong>定义</strong>：MobX 是一个用于管理应用程序状态的库，使用响应式编程模型。</li>\n<li><strong>功能</strong>：提供了简单易用的 API 来创建可观察的状态，处理派发的动作，以及自动跟踪和更新依赖的组件。</li>\n<li><strong>使用场景</strong>：适用于任何 JavaScript 应用，支持 React、Vue 等框架。</li>\n</ul>\n</li>\n<li><strong>mobx-react</strong>：\n<ul>\n<li><strong>定义</strong>：mobx-react 是 MobX 的一个集成库，专为 React 设计，提供了将 MobX 状态和 React 组件结合的功能。</li>\n<li><strong>功能</strong>：允许 React 组件响应 MobX 状态的变化，提供装饰器（如 @observer）和其他帮助函数来简化与 MobX 的集成。</li>\n<li><strong>版本</strong>：在 React 16 及更早版本中广泛使用，提供了一些传统的 API。</li>\n</ul>\n</li>\n<li><strong>mobx-react-lite</strong>：\n<ul>\n<li><strong>定义</strong>：mobx-react-lite 是为 React Hooks 设计的 MobX 轻量级版本，主要用于函数组件。</li>\n<li><strong>功能</strong>：提供了与 MobX 结合使用的钩子（如 observer）和其他功能，适合函数组件而非类组件。</li>\n<li><strong>优点</strong>：更小巧且性能优化，适合使用 React Hooks 的现代 React 应用。</li>\n</ul>\n</li>\n<li><strong>mobx-persist-store</strong>：\n<ul>\n<li><strong>定义</strong>：mobx-persist-store 是一个用于 MobX 状态管理库的持久化工具。</li>\n<li><strong>功能</strong>：可以将 MobX 中的状态数据保存到本地存储中（如 localStorage 或 sessionStorage），并在页面刷新或重新加载时自动恢复状态。</li>\n<li><strong>优点</strong>：简单、开箱即用</li>\n</ul>\n</li>\n</ul>\n<div class=\"note warning\">\n<p>若是在 React 中应用，则 mobx 需要配合 mobx-react（或者 mobx-react-lite） 库使用。</p>\n</div>\n<h1 id=\"核心概念和方法\"><a class=\"anchor\" href=\"#核心概念和方法\">#</a> 核心概念和方法</h1>\n<h2 id=\"observable可观察的状态\"><a class=\"anchor\" href=\"#observable可观察的状态\">#</a> observable（可观察的状态）</h2>\n<h3 id=\"makeobservable\"><a class=\"anchor\" href=\"#makeobservable\">#</a> makeObservable</h3>\n<p><code>makeObservable</code>  可以捕获已经存在的对象属性并且使得它们可观察，一般在构造函数中调用。</p>\n<p>🌰：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makeObservable<span class=\"token punctuation\">,</span> observable<span class=\"token punctuation\">,</span> computed<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> flow <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> observer <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-react-lite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DoubleStore</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">makeObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> observable<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">double</span><span class=\"token operator\">:</span> computed<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token literal-property property\">increment</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token literal-property property\">fetch</span><span class=\"token operator\">:</span> flow<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">response</span><span class=\"token operator\">:</span> Response <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">const</span> doubleStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DoubleStore</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>doubleStore<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>doubleStore<span class=\"token punctuation\">.</span>double<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> doubleStore<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> doubleStore<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Fetch<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>observer</code>  是一个高阶函数，它会将组件转变为一个响应式组件。当组件中使用的 <code>observable</code>  状态发生变化时，组件会自动重新渲染。</p>\n</blockquote>\n<p><code>makeObservable</code>  传入的第二个参数是对变量的注解，常用的注解如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>注解</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>observable<br/>observable.deep</td>\n<td>定义一个存储 state 的可跟踪字段，是 MobX 最基础的概念，它允许将对象、数组、Map 等数据结构变为可观察的。当 <code>observable</code>  数据发生改变时，依赖它的观察者（observer）会自动更新</td>\n</tr>\n<tr>\n<td>action</td>\n<td>把一个函数标记为会修改 state 的 action。详见: <a href=\"#bcdc53d1\">action</a>。不可写</td>\n</tr>\n<tr>\n<td>action.bound</td>\n<td>类似于 action，但是会将 action 绑定到实例，因此将始终设置 <code>this</code> 。不可写。</td>\n</tr>\n<tr>\n<td>computed</td>\n<td>可以用在 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\">getter</a> 上，用来将其声明为可缓存的派生值。详见：<a href=\"#66a5467f\">computed</a></td>\n</tr>\n<tr>\n<td>flow</td>\n<td>创建一个  <code>flow</code>  管理异步进程。需要注意的是，推断出来的 TypeScript 返回类型可能会出错。 不可写</td>\n</tr>\n<tr>\n<td>override</td>\n<td>用于子类覆盖继承的 action，flow，computed，action.bound</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"makeautoobservable\"><a class=\"anchor\" href=\"#makeautoobservable\">#</a> makeAutoObservable</h3>\n<p><code>makeAutoObservable</code>  是加强版的 <code>makeObservable</code> ，在默认情况下它将推断所有的属性。你仍然可以使用 <code>overrides</code>  重写某些注解的默认行为。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makeAutoObservable <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> observer <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-react-lite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterStore</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将所有属性变为 observable</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> counterStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CounterStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>counterStore<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> counterStore<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"uselocalobservable\"><a class=\"anchor\" href=\"#uselocalobservable\">#</a> useLocalObservable</h3>\n<p><code>useLocalObservable</code>  用于在组件内部创建一个本地的 MobX store，其返回一个可观察的对象，组件会根据它的变化自动重新渲染。</p>\n<p>若是在组件内部创建 store，可以使用 <code>useLocalObservable</code> ：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> observer<span class=\"token punctuation\">,</span> useLocalObservable <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-react-lite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> counterStore <span class=\"token operator\">=</span> <span class=\"token function\">useLocalObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>counterStore<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> counterStore<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"extendobservable\"><a class=\"anchor\" href=\"#extendobservable\">#</a> extendObservable</h3>\n<p><code>extendObservable</code>  可以用来在 <code>target</code>  对象上引入新属性并立即把它们全部转化成 observable。</p>\n<p>基本上就是 <code>Object.assign(target, properties); makeAutoObservable(target, overrides, options);</code>  的简写。但它不会变动 <code>target</code>  上已有的属性。</p>\n<p>🌰：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">extendObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> firstName<span class=\"token punctuation\">,</span> lastName <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Michel\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Weststrate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"action动作\"><a class=\"anchor\" href=\"#action动作\">#</a> action（动作）</h2>\n<p><code>action</code>  是修改 observable 状态的函数，它用于批量更新状态，以确保状态修改时触发的更新是最小化和优化的。相比于 <code>makeAutoObservable</code>  自动帮你声明一部分 <code>action</code> ，自己手动声明有如下优势：</p>\n<ol>\n<li>它们在 <a href=\"https://www.mobxjs.com/api#transaction\">transactions</a> 内部运行。任何可观察对象在最外层的 action 完成之前都不会被更新，这一点保证了在 <code>action</code>  完成之前， <code>action</code>  执行期间生成的中间值或不完整的值对应用程序的其余部分都是不可见的。</li>\n<li>默认情况下，不允许在 <code>actions</code>  之外改变 state。这有助于在代码中清楚地对状态更新发生的位置进行定位。</li>\n</ol>\n<div class=\"note info\">\n<p>action 注解应该仅用于会修改 state 的函数。派生其他信息（执行查询或者过滤数据）的函数不应该被标记为 actions，以便 MobX 可以对它们的调用进行跟踪。</p>\n</div>\n<p><strong>用途</strong>：</p>\n<h3 id=\"使用-action-包装函数\"><a class=\"anchor\" href=\"#使用-action-包装函数\">#</a> 使用 action 包装函数</h3>\n<p>为了尽可能地利用 MobX 的事务性，actions 应该尽可能被传到外围。如果一个类方法会修改 state，可以将其标记为 action。若能把事件处理函数标记为 actions 就更好了，因为最外层的事务起着决定性作用。</p>\n<p>为了帮助创建基于 action 的事件处理函数， <code>action</code>  不仅仅是一个注解，更是一个高阶函数。可以使用函数将它作为一个参数来调用，在这种情况下它将会返回一个有着相同签名的使用  <code>action</code>  包装过的函数。</p>\n<p>例如在 React 中，可以按照下面的方式包装  <code>onClick</code>  事件处理函数：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ResetButton</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> formState <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>button</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      formState<span class=\"token punctuation\">.</span><span class=\"token function\">resetPendingUploads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      formState<span class=\"token punctuation\">.</span><span class=\"token function\">resetValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Reset form</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为了更好的调试体验，可以为被包装的函数命名，或者将名称作为  <code>action</code>  的第一个参数进行传递。</p>\n<h3 id=\"actionbound\"><a class=\"anchor\" href=\"#actionbound\">#</a> action.bound</h3>\n<p><code>action.bound</code>  是一类注解，可用于将方法自动绑定到实例上，这样  <code>this</code>  会始终被正确绑定在函数内部。</p>\n<p><strong>用法</strong>：</p>\n<p>默认 class 中的方法不会绑定 this，this 指向取决于如何调用。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 正确</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;button onClick=&#123;() => counter.increment()&#125;>加1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  // 错误，此时 increment 中的 this 并不指向实例</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onClick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token value javascript language-javascript\"><span class=\"token punctuation\">&#123;</span>counter<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">&#125;</span></span></span></span><span class=\"token punctuation\">></span></span>加1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在使用 makeObservable 的时候可以通过 action.bound 绑定 this 的指向。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">makeObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> observable<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">increment</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>bound<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">reset</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>bound<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此时组件中即可直接使用 store 的方法。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 正确 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onClick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token punctuation\">&#123;</span>counter<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>加1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"runinaction\"><a class=\"anchor\" href=\"#runinaction\">#</a> runInAction</h3>\n<p>使用这个工具函数来创建一个会被立即调用的临时 action，在异步进程中非常有用。</p>\n<p>🌰：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> observable<span class=\"token punctuation\">,</span> runInAction <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">runInAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  state<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  state<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>runInAction</code>  里面的代码会立即调用，所以 <code>state.value</code>  的值最终为 2。</p>\n<h2 id=\"computed计算\"><a class=\"anchor\" href=\"#computed计算\">#</a> computed（计算）</h2>\n<p>计算值可以用来从其他可观察对象中派生信息。 计算值采用惰性求值，会缓存其输出，并且只有当其依赖的可观察对象被改变时才会重新计算。 它们在不被任何值观察时会被暂时停用。</p>\n<p>计算值可以通过在 JavaScript getters 上添加 <code>computed</code>  注解来创建。 使用 <code>makeObservable</code>  将 getter 声明为 computed。或者如果你希望所有的 getters 被自动声明为 <code>computed</code> ，可以使用 <code>makeAutoObservable</code> ， <code>observable</code>  或者 <code>extendObservable</code> 。</p>\n<p>下面的示例依靠 Reactions 高级部分中的 <a href=\"#ve2UE\">autorun</a> 来辅助说明计算值的意义：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makeObservable<span class=\"token punctuation\">,</span> observable<span class=\"token punctuation\">,</span> computed<span class=\"token punctuation\">,</span> autorun <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderLine</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  price <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  amount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">makeObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> observable<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">amount</span><span class=\"token operator\">:</span> observable<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token literal-property property\">total</span><span class=\"token operator\">:</span> computed<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">total</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Computing...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">const</span> order <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">const</span> stop <span class=\"token operator\">=</span> <span class=\"token function\">autorun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total: \"</span> <span class=\"token operator\">+</span> order<span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// Computing...</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// Total: 0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// (不会重新计算！)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>order<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// Computing...</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// (无需 autorun)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>order<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// Computing...</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// Total: 10</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>order<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">// 计算值和 autorun 都不会被重新计算.</span></pre></td></tr></table></figure><p>上面的例子很好地展示了 <code>计算值</code> 的好处，它充当了缓存点的角色。 即使我们改变了 <code>amount</code> ，进而触发了 <code>total</code>  的重新计算， 也不会触发 <code>autorun</code> ，因为 <code>total</code>  将会检测到其输出未发生任何改变，所以也不需要更新 <code>autorun</code> 。</p>\n<p><img loading=\"lazy\" data-src=\"https://cdn.nlark.com/yuque/0/2024/png/36082988/1733484425366-8618136a-33fb-498e-ac54-05e977befc9a.png\" alt=\"示例中的依赖图\" /></p>\n<p>使用计算值时，请遵循下面的最佳实践：</p>\n<ol>\n<li>它们不应该有副作用或者更新其他可观察对象。</li>\n<li>避免创建和返回新的可观察对象。</li>\n<li>它们不应该依赖非可观察对象的值</li>\n</ol>\n<h2 id=\"reaction\"><a class=\"anchor\" href=\"#reaction\">#</a> reaction</h2>\n<p>reactions 是需要理解的重要概念，因为他可以将 MobX 中所有的特性有机地融合在一起。 reactions 的目的是对自动发生的副作用进行建模。 它们的意义在于为你的可观察状态创建消费者，当关联的值发生变化时，自动运行副作用。</p>\n<h3 id=\"autorun\"><a class=\"anchor\" href=\"#autorun\">#</a> Autorun</h3>\n<ul>\n<li><code>autorun(effect: (reaction) =&gt; void</code></li>\n</ul>\n<p><code>autorun</code>  函数接受一个函数作为参数，每当该函数所观察的值发生变化时，它都应该运行。 当你自己创建 <code>autorun</code>  时，它也会运行一次。它仅仅对可观察状态的变化做出响应，比如那些你用 <code>observable</code>  或者 <code>computed</code>  注释的。</p>\n<p>🌰：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makeAutoObservable<span class=\"token punctuation\">,</span> autorun <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  energyLevel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>energyLevel <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">reduceEnergy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>energyLevel <span class=\"token operator\">-=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">isHungry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>energyLevel <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">const</span> giraffe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Gary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">autorun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Energy level:\"</span><span class=\"token punctuation\">,</span> giraffe<span class=\"token punctuation\">.</span>energyLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">autorun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>giraffe<span class=\"token punctuation\">.</span>isHungry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now I'm hungry!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm not hungry!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now let's change state!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  giraffe<span class=\"token punctuation\">.</span><span class=\"token function\">reduceEnergy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Energy level: <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>I<span class=\"token string\">'m not hungry!</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Now let'</span>s change state<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Energy level: <span class=\"token number\">90</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Energy level: <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Energy level: <span class=\"token number\">70</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Energy level: <span class=\"token number\">60</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Energy level: <span class=\"token number\">50</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Energy level: <span class=\"token number\">40</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Now I'm hungry<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Energy level: <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Energy level: <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Energy level: <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Energy level: <span class=\"token number\">0</span></pre></td></tr></table></figure><h3 id=\"reaction-2\"><a class=\"anchor\" href=\"#reaction-2\">#</a> Reaction</h3>\n<ul>\n<li><code>reaction(() =&gt; value, (value, previousValue, reaction) =&gt; &#123; sideEffect &#125;, options?)</code></li>\n</ul>\n<p><code>reaction</code>  类似于  <code>autorun</code> ，但可以让你更加精细地控制要跟踪的可观察对象。 它接受两个函数作为参数：第一个 <code>data</code>  函数，它会跟踪数据并且将返回值将会作为第二个 <code>effect</code>  函数的输入。 注意，副作用只会对 <code>data</code>  函数中被访问过的数据做出反应，这些数据可能少于 <code>effect</code>  函数中实际使用的数据。</p>\n<p>一般的模式是在 <code>data</code>  函数中返回你在副作用中需要的所有数据， 并以这种方式更精确地控制副作用触发的时机。 与 <code>autorun</code>  不同，副作用在初始化时不会自动运行，而只会在 data 表达式首次返回新值之后运行。</p>\n<p>🌰：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makeAutoObservable<span class=\"token punctuation\">,</span> reaction <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  energyLevel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>energyLevel <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">reduceEnergy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>energyLevel <span class=\"token operator\">-=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">isHungry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>energyLevel <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">const</span> giraffe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Gary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">reaction</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> giraffe<span class=\"token punctuation\">.</span>isHungry<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">isHungry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isHungry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now I'm hungry!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm not hungry!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Energy level:\"</span><span class=\"token punctuation\">,</span> giraffe<span class=\"token punctuation\">.</span>energyLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now let's change state!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  giraffe<span class=\"token punctuation\">.</span><span class=\"token function\">reduceEnergy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Now <span class=\"token builtin class-name\">let</span><span class=\"token string\">'s change state!</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Now I'</span>m hungry<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Energy level: <span class=\"token number\">40</span></pre></td></tr></table></figure><h3 id=\"when\"><a class=\"anchor\" href=\"#when\">#</a> When</h3>\n<ul>\n<li><code>when(predicate: () =&gt; boolean, effect?: () =&gt; void, options?)</code></li>\n<li><code>when(predicate: () =&gt; boolean, options?): Promise</code></li>\n</ul>\n<p><code>when</code>  会观察并运行给定的 <em>predicate</em> 函数，直到其返回 <code>true</code> 。 一旦 predicate 返回了 true，给定的 <em>effect</em> 函数就会执行并且自动执行器函数将会被清理掉。</p>\n<p>如果你没有传入 <code>effect</code>  函数， <code>when</code>  函数返回一个 <code>Promise</code>  类型的 disposer，并允许你手动取消。</p>\n<p>🌰：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> when<span class=\"token punctuation\">,</span> makeAutoObservable <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyResource</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">dispose</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">when</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// Once...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isVisible<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// ... then.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">isVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 表示此项目是否可见.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 清理一些资源.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disposer\"><a class=\"anchor\" href=\"#disposer\">#</a> disposer</h3>\n<p>传递给 <code>autorun</code> ， <code>reaction</code>  和 <code>when</code>  的函数只有在它们观察的所有对象都被 GC 之后才会被 GC。原则上，它们一直等待可观察对象发生新的变化。 为了阻止 reactions 永远地等待下去，它们总是会返回一个 disposer 函数，该函数可以用来停止执行并且取消订阅所使用的任何可观察对象。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化一个 autorun 并且打印 0.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> disposer <span class=\"token operator\">=</span> <span class=\"token function\">autorun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 打印: 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>counter<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 停止 autorun.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">disposer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 不会打印消息.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>counter<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note danger\">\n<p>为了防止内存泄漏，一旦不再需要这些方法中的副作用时，请务必调用它们所返回的 disposer 函数</p>\n</div>\n<h1 id=\"mobx-持久化\"><a class=\"anchor\" href=\"#mobx-持久化\">#</a> Mobx 持久化</h1>\n<p><code>makePersistable</code>  是 <code>mobx-persist-store</code>  库中一个最主要、最常用到的函数。其作用如下：</p>\n<ul>\n<li><strong>持久化 MobX Store</strong>：将指定的 observable 数据自动保存到浏览器的 localStorage 或 sessionStorage 中。</li>\n<li><strong>恢复数据</strong>：当应用刷新或重新启动时，自动从存储中恢复数据，保持应用状态的一致性。</li>\n<li><strong>自动更新</strong>：在 observable 数据发生变化时，自动更新存储的数据。</li>\n</ul>\n<p>🌰：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makeAutoObservable <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> observer <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-react-lite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makePersistable <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-persist-store\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterStore</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">const</span> counterStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CounterStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 对 MobX store 进行持久化处理</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">makePersistable</span><span class=\"token punctuation\">(</span>counterStore<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CounterStore\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 存储在 localStorage 的 key 名称</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token literal-property property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 要持久化的属性</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token literal-property property\">storage</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用 localStorage 进行存储</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Count<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>counterStore<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> counterStore<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> counterStore<span class=\"token punctuation\">.</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Decrement<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note success\">\n<p>当页面重新加载时，mobx-persist-store 会自动从 localStorage 中恢复数据，保持状态一致。</p>\n</div>\n<h1 id=\"依赖注入mobx-react\"><a class=\"anchor\" href=\"#依赖注入mobx-react\">#</a> 依赖注入（mobx-react）</h1>\n<p>除了能通过 <code>observer</code> ,  <code>useLocalObservable</code>  等方法将 React 组件转化为响应式组件之外， <code>mobx-react</code>  还提供了依赖注入功能。</p>\n<h2 id=\"provider\"><a class=\"anchor\" href=\"#provider\">#</a> Provider</h2>\n<p><code>Provider</code>  是 mobx-react 提供的上下文（Context）注入工具，用于在整个组件树中提供 MobX store，使得深层嵌套的组件可以通过 <code>inject</code>  或者 useStore 来获取 store。</p>\n<p>我们在父组件中使用 <code>Provider</code>  来给子组件提供依赖：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makeAutoObservable <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Provider <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-react\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Counter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components/Counter\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterStore</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">const</span> counterStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CounterStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token operator\">&lt;</span>Provider counterStore<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>counterStore<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过 <code>Provider</code>  提供的 counterStore，后代组件可以通过 <code>inject</code>  函数来获取该 store（见下文）。</p>\n<h2 id=\"inject\"><a class=\"anchor\" href=\"#inject\">#</a> inject</h2>\n<p><code>inject</code>  用于将 <code>Provider</code>  提供的 store 注入到组件的 props 中。结合 <code>observer</code>  使用，能够让组件轻松访问 MobX store 并响应其变化。</p>\n<p>在子组件中注入依赖：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> inject<span class=\"token punctuation\">,</span> observer <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-react\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CounterStore</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token literal-property property\">counterStore</span><span class=\"token operator\">:</span> CounterStore<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">CounterComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> Props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> counterStore <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Count<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>counterStore<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> counterStore<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> counterStore<span class=\"token punctuation\">.</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Decrement<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Counter <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"counterStore\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">observer</span><span class=\"token punctuation\">(</span>CounterComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>inject</code>  的主要功能是将 <code>Provider</code>  中的 store 作为 props 传递给组件，组件本身并不需要显式从上下文获取 store。</p>\n",
            "tags": [
                "计算机科学",
                "编程知识",
                "前端学习",
                "前端",
                "状态管理"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/computer-science/programming/front-end/devicePixelRatio/",
            "url": "https://nocturne-tome.cn/computer-science/programming/front-end/devicePixelRatio/",
            "title": "devicePixelRatio",
            "date_published": "2024-12-16T11:21:07.000Z",
            "content_html": "<h1 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h1>\n<p><code>devicePixelRatio</code>  是浏览器中 <code>window</code>  对象的一个属性，用于获取设备的物理像素和逻辑像素之间的比例，通常用于适配高分辨率设备（如 Retina 屏幕）。它的值定义为设备的物理像素与 CSS 像素的比例（即一个 CSS 像素采用几个实际屏幕像素绘制）。这个值影响图像和画布在不同设备上的显示效果。</p>\n<p><strong>在高分辨率（Retina）设备上，devicePixelRatio 通常为 2 或更高，而在标准显示屏上为 1。</strong></p>\n<h1 id=\"常见用途\"><a class=\"anchor\" href=\"#常见用途\">#</a> 常见用途</h1>\n<p>1.<strong> 画布绘图</strong>：在高分辨率设备上绘图时，可以使用 devicePixelRatio 来缩放 canvas，确保画布内容的清晰度。</p>\n<p>2.<strong> 媒体查询</strong>：在 CSS 中，可以利用 devicePixelRatio 来定义不同的分辨率适配样式。</p>\n<p>以下是一个在 canvas 上使用 devicePixelRatio 的示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myCanvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获取 devicePixelRatio</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> dpr <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>devicePixelRatio <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 设置 canvas 的宽高以适应设备的分辨率</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">*</span> dpr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span>clientHeight <span class=\"token operator\">*</span> dpr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 缩放 context，以便在高分辨率设备上清晰显示</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>dpr<span class=\"token punctuation\">,</span> dpr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 绘制内容</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note warning\">\n<p>使用 devicePixelRatio 可以提高画面清晰度，但也会增加绘制的像素数量，可能导致性能开销。因此，在绘制复杂图形时需要平衡清晰度和性能。</p>\n</div>\n",
            "tags": [
                "计算机科学",
                "编程知识",
                "前端学习",
                "前端",
                "分辨率"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/computer-science/programming/front-end/Nginx/",
            "url": "https://nocturne-tome.cn/computer-science/programming/front-end/Nginx/",
            "title": "Nginx",
            "date_published": "2024-12-16T11:15:45.000Z",
            "content_html": "<h1 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h1>\n<p>Nginx 是一个高性能的 HTTP 服务器、反向代理服务器以及邮件代理服务器。它以高并发、高吞吐量、低内存消耗而著称，常用于静态资源服务、负载均衡、反向代理和缓存等场景。</p>\n<p>至于为什么要用代理服务器，请看：<a href=\"http://localhost:4000/computer-science/programming/front-end/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/\">代理服务器</a></p>\n<h1 id=\"主要功能\"><a class=\"anchor\" href=\"#主要功能\">#</a> 主要功能</h1>\n<ol>\n<li><strong>HTTP 服务器</strong>：Nginx 可以作为静态文件服务器，直接提供 HTML、CSS、JavaScript、图片等文件。它非常高效，适合用作前端项目的静态资源托管服务器。</li>\n<li><strong>反向代理</strong>：Nginx 可以将客户端的请求转发给后端服务器（如 Node.js、Python、Java 应用），起到代理作用，同时隐藏后端服务器，提升安全性。</li>\n<li><strong>负载均衡</strong>：Nginx 可以将请求分发到多个后端服务器（负载均衡），根据服务器的健康状态和负载情况，自动选择合适的服务器处理请求。</li>\n<li><strong>缓存功能</strong>：Nginx 可以缓存后端服务器返回的响应，提高重复请求的处理效率，减少后端服务器的压力。</li>\n<li><strong>SSL/TLS 加密</strong>：Nginx 可以处理 HTTPS 请求，支持 SSL/TLS 协议，提供安全的网络通信。</li>\n</ol>\n<h1 id=\"预定义变量\"><a class=\"anchor\" href=\"#预定义变量\">#</a> 预定义变量</h1>\n<h2 id=\"客户端信息\"><a class=\"anchor\" href=\"#客户端信息\">#</a> 客户端信息</h2>\n<ul>\n<li>$remote_addr：客户端 IP 地址。</li>\n<li>$remote_port：客户端端口号。</li>\n<li>$remote_user：已经认证的客户端用户名（如 HTTP 基本认证）。</li>\n<li>$http_user_agent：客户端的 User-Agent 信息。</li>\n<li>$http_referer：HTTP 请求头中的 Referer 信息。</li>\n</ul>\n<h2 id=\"请求信息\"><a class=\"anchor\" href=\"#请求信息\">#</a> 请求信息</h2>\n<ul>\n<li>$request：请求的完整行（例如 GET /index.html HTTP/1.1）。</li>\n<li>$request_uri：原始请求的 URI，包括请求参数（例如 /index.html?query=1）。</li>\n<li>$uri：请求的 URI，但不包含参数，且可能已被 location 重写。</li>\n<li>$args：请求的参数部分（即？之后的部分）。</li>\n<li>$request_method：请求方法（如 GET、POST）。</li>\n<li>$query_string：请求的查询字符串（与 $args 相同）。</li>\n<li>$http_&lt;header_name&gt;：访问请求头信息。例如，$http_host 用于获取请求头中的 Host 信息。</li>\n</ul>\n<h2 id=\"响应信息\"><a class=\"anchor\" href=\"#响应信息\">#</a> 响应信息</h2>\n<ul>\n<li>$status：响应的 HTTP 状态码。</li>\n<li>$sent_http_&lt;header_name&gt;：自定义响应头的信息。可以通过这种方式在配置中指定和修改响应头。</li>\n</ul>\n<h2 id=\"服务器信息\"><a class=\"anchor\" href=\"#服务器信息\">#</a> 服务器信息</h2>\n<ul>\n<li>$server_addr：服务器地址，Nginx 尝试解析配置的地址，但此变量可能影响性能。</li>\n<li>$server_name：处理请求的服务器名称。</li>\n<li>$server_port：请求到达的服务器端口。</li>\n</ul>\n<h2 id=\"连接信息\"><a class=\"anchor\" href=\"#连接信息\">#</a> 连接信息</h2>\n<ul>\n<li>$connection：当前连接的序列号。</li>\n<li>$connection_requests：当前连接已经处理的请求数量。</li>\n</ul>\n<h2 id=\"文件路径\"><a class=\"anchor\" href=\"#文件路径\">#</a> 文件路径</h2>\n<ul>\n<li>$document_root：当前请求的 root 路径（文件系统中的路径）。</li>\n<li>$realpath_root：当前请求的真实路径，即解析符号链接后的路径。</li>\n<li>$request_filename：当前请求的完整文件路径。</li>\n</ul>\n<h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n<ul>\n<li>$hostname：Nginx 服务器的主机名。</li>\n<li>$binary_remote_addr：客户端 IP 的二进制表示（用于哈希计算）。</li>\n<li>$time_local：请求的本地时间。</li>\n<li>$msec：当前时间的 Unix 时间戳（毫秒级）。</li>\n<li>$scheme：请求使用的协议（如 http 或 https）。</li>\n</ul>\n<h1 id=\"配置项\"><a class=\"anchor\" href=\"#配置项\">#</a> 配置项</h1>\n<h2 id=\"全局配置\"><a class=\"anchor\" href=\"#全局配置\">#</a> 全局配置</h2>\n<p>这些配置位于 nginx.conf 文件的最外层，影响整个 Nginx 的行为。</p>\n<h3 id=\"worker_processes\"><a class=\"anchor\" href=\"#worker_processes\">#</a> worker_processes</h3>\n<ul>\n<li>定义：Nginx 启动的工作进程数，一般设置为服务器的 CPU 核心数，或者使用 auto 让 Nginx 自动优化。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>worker processes auto<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"error_log\"><a class=\"anchor\" href=\"#error_log\">#</a> error_log</h3>\n<ul>\n<li>定义：指定错误日志文件和日志级别。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>error_log /var/log/nginx/error.log warn<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"pid\"><a class=\"anchor\" href=\"#pid\">#</a> pid</h3>\n<ul>\n<li>定义：指定保存 Nginx 进程 ID 的文件路径。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pid /var/run/nginx.pid<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"events-模块配置\"><a class=\"anchor\" href=\"#events-模块配置\">#</a> events 模块配置</h2>\n<h3 id=\"worker_connections\"><a class=\"anchor\" href=\"#worker_connections\">#</a> worker_connections</h3>\n<ul>\n<li>定义：每个工作进程允许的最大连接数。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>events <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    worker_connections <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    multi_accept: on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"multi_accept\"><a class=\"anchor\" href=\"#multi_accept\">#</a> multi_accept</h3>\n<ul>\n<li>定义：当设置为 on 时，每个工作进程会一次性接受尽可能多的连接，这可以提高请求处理效率。默认为 off。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>events <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    worker_connections <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    multi_accept: on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"use\"><a class=\"anchor\" href=\"#use\">#</a> use</h3>\n<ul>\n<li>定义：用于指定事件模型（如 epoll、kqueue、select 等），Nginx 会根据操作系统自动选择最优的事件模型。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>events <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    use: epoll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"accept_mutex\"><a class=\"anchor\" href=\"#accept_mutex\">#</a> accept_mutex</h3>\n<ul>\n<li>定义：用于启用 “接受互斥锁”，防止多个工作进程同时接受请求，避免竞争，提升负载均衡。默认值为 on。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>events <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    accept_mutex: on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"worker_aio_requests\"><a class=\"anchor\" href=\"#worker_aio_requests\">#</a> worker_aio_requests</h3>\n<ul>\n<li>定义：用于设置异步 I/O 的最大请求数（主要用于文件操作）。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>events <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    worker_aio_requests <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"http-模块配置\"><a class=\"anchor\" href=\"#http-模块配置\">#</a> http 模块配置</h2>\n<p>http 模块是处理 HTTP 请求的核心模块，定义了如何处理客户端请求。</p>\n<h3 id=\"server\"><a class=\"anchor\" href=\"#server\">#</a> server</h3>\n<ul>\n<li>定义：定义一个虚拟主机块。一个 Nginx 实例可以有多个 server 块，每个块定义一个虚拟主机。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    server_name example.com<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    root /var/www/html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"location\"><a class=\"anchor\" href=\"#location\">#</a> location</h3>\n<ul>\n<li>定义：匹配 URL 路径的处理规则。不同的路径可以有不同的处理方式。比如代理、文件服务等。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    try_files <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ <span class=\"token operator\">=</span><span class=\"token number\">404</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>try_files</code>  会尝试按照指定的顺序检查文件是否存在，并返回找到的第一个文件。如果所有指定的文件都不存在， <code>try_files</code>  可以将请求重定向到另一个 URI 或返回一个指定的 HTTP 状态码。</p>\n<p>在这个例子中，当请求匹配到 <code>/</code>  时，Nginx 会首先尝试直接返回请求的 URI 对应的文件（即 <code>$uri</code> ）。如果该文件不存在，Nginx 会尝试将请求作为目录处理，即在该目录下找到默认的索引文件（一般为 <code>index.html</code> ）。如果目录也不存在或没有默认索引文件，Nginx 最终会返回 404 状态码。</p>\n</blockquote>\n<h3 id=\"listen\"><a class=\"anchor\" href=\"#listen\">#</a> listen</h3>\n<ul>\n<li>定义：指定虚拟主机监听的端口，通常是 80（HTTP）或者 443（HTTPS）。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"server_name\"><a class=\"anchor\" href=\"#server_name\">#</a> server_name</h3>\n<ul>\n<li>定义：指定虚拟主机的域名，支持通配符匹配。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server_name example.com www.example.com<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># server_name  *.example.com;</span></pre></td></tr></table></figure><h3 id=\"rootalias\"><a class=\"anchor\" href=\"#rootalias\">#</a> root/alias</h3>\n<ul>\n<li>定义：root 设置根目录路径，alias 设置路径别名。<strong>alias 在匹配 location 时不会追加匹配的路径，而 root 会追加匹配路径</strong>。</li>\n</ul>\n<div class=\"note success\">\n<p>root 指令允许你指定 Nginx 在文件系统中的哪个目录开始查找和返回请求的文件。这是处理静态文件（如 HTML、CSS、JavaScript、图片等）和可能的服务端脚本或程序的基础。</p>\n<p>alias 指令用于映射请求的 URI 到一个确切的文件系统路径。它不会将请求的 URI 与指定路径拼接，而是直接替换掉 URI 中的部分或全部，以定位到具体的文件。</p>\n</div>\n<ul>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location /static/ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    root /var/www/html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>在这个配置中，如果 Nginx 接收到一个对 <code>http://example.com/static/images/logo.png</code>  的请求，它会将 <code>/static/images/logo.png</code>  拼接到 <code>/var/www/html</code>  后面，形成 <code>/var/www/html/images/logo.png</code>  的完整文件路径，然后去尝试找到并返回该文件。</p>\n</div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location /some/path/ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin class-name\">alias</span> /path/to/actual/directory/<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>在这个例子中，当请求以 <code>/some/path/</code>  开头时，Nginx 会将 <code>/some/path/</code>  部分替换为 <code>/path/to/actual/directory/</code> ，并在新的路径下查找资源。重要的是要注意 <code>alias</code>  路径末尾的斜杠，它会影响 Nginx 如何处理剩余的 URI 部分。</p>\n</div>\n<p><strong>alias 路径处理</strong>：</p>\n<ul>\n<li>如果 <code>location</code>  块中的 URI 以斜杠结尾（如 <code>/some/path/</code> ），则 Nginx 会在 <code>alias</code>  指定的路径后直接添加请求的剩余 URI 部分（不包括 <code>location</code>  块中指定的 URI 部分）来查找文件。</li>\n<li>如果 <code>location</code>  块中的 URI 不以斜杠结尾（如 <code>/some/file</code> ），则 Nginx 会将请求的最后一个部分（即最后一个 <code>/</code>  之后的部分）作为文件名，并在 <code>alias</code>  指定的路径下查找这个文件。</li>\n</ul>\n<h3 id=\"index\"><a class=\"anchor\" href=\"#index\">#</a> index</h3>\n<ul>\n<li>定义：指定当访问目录时，默认加载的文件。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>index index.html index.htm<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"gzip\"><a class=\"anchor\" href=\"#gzip\">#</a> gzip</h3>\n<ul>\n<li>定义：启用 gzip 压缩以提高传输效率</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gzip</span> on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gzip_types text/plain application/javascript text/css<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"client_max_body_size\"><a class=\"anchor\" href=\"#client_max_body_size\">#</a> client_max_body_size</h3>\n<ul>\n<li>定义：设置客户端请求的最大允许大小，常用于限制上传文件的大小。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>client_max_body_size 50M<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"反向代理配置\"><a class=\"anchor\" href=\"#反向代理配置\">#</a> 反向代理配置</h2>\n<p>Nginx 常被用于反向代理，通过它可以将请求转发到后端服务器。</p>\n<h3 id=\"proxy_pass\"><a class=\"anchor\" href=\"#proxy_pass\">#</a> proxy_pass</h3>\n<ul>\n<li>定义：转发请求到后端服务器。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location /api/ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    proxy_pass http://localhost:3000/<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"proxy_set_header\"><a class=\"anchor\" href=\"#proxy_set_header\">#</a> proxy_set_header</h3>\n<ul>\n<li>定义：在转发请求时，设置额外的 HTTP 请求头。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location /api/ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    proxy_pass http://localhost:3000/<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    proxy_set_header Host <span class=\"token variable\">$host</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    proxy_set_header X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"proxy_redirect\"><a class=\"anchor\" href=\"#proxy_redirect\">#</a> proxy_redirect</h3>\n<ul>\n<li>定义：修改后端服务器返回的 Location 和 Refresh HTTP 响应头字段。这在你使用 Nginx 作为反向代理时特别有用，因为后端服务器返回的响应可能会包含指向其自身的 URL，而不是你希望客户端访问的公共 URL（即 Nginx 代理的 URL）。</li>\n</ul>\n<blockquote>\n<p>关于 Location 和 Refresh 的更多内容，可以看：<a href=\"https://ku.baidu-int.com/knowledge/HFVrC7hq1Q/pKzJfZczuc/qatPY3vdC4/z_VUiLtV8ph3n8#anchor-c9525650-91fb-11ef-b72b-bb6e2e0ad49c\">请求头和响应头</a></p>\n</blockquote>\n<ul>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>proxy_redirect http://backend.example.com/ http://example.com/<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"负载均衡配置\"><a class=\"anchor\" href=\"#负载均衡配置\">#</a> 负载均衡配置</h2>\n<p>Nginx 支持将请求分发到多个后端服务器，实现负载均衡。</p>\n<h3 id=\"upstream\"><a class=\"anchor\" href=\"#upstream\">#</a> upstream</h3>\n<ul>\n<li>定义：定义后端服务器组。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upstream name <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    server address <span class=\"token punctuation\">[</span>parameters<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    server address <span class=\"token punctuation\">[</span>parameters<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>说明：\n<ul>\n<li><code>name</code> ：上游服务器组的名称，可以在 <code>proxy_pass</code>  指令中引用。</li>\n<li><code>address</code> ：上游服务器的地址，可以是 IP 地址和端口号，也可以是域名。</li>\n<li><code>parameters</code> ：可选参数，用于配置服务器的权重、最大失败次数、超时时间等。</li>\n</ul>\n</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>http <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    upstream myapp <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        server <span class=\"token number\">192.168</span>.1.100:8080 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        server <span class=\"token number\">192.168</span>.1.101:8080<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        server <span class=\"token number\">192.168</span>.1.102:8080 backup<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        server_name example.com<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            proxy_pass http://myapp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            proxy_set_header Host <span class=\"token variable\">$host</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"复杂均衡策略\"><a class=\"anchor\" href=\"#复杂均衡策略\">#</a> 复杂均衡策略</h3>\n<ul>\n<li>策略：轮询（默认），将请求依次分配给后端服务器。</li>\n<li><code>parameters</code>  常用属性：\n<ul>\n<li><code>weight</code> ：设置服务器的权重，默认为 1。权重越高，分配到的请求越多。</li>\n<li><code>max_fails</code> ：在指定的时间内，连接失败的最大次数。当超过这个次数时，Nginx 会认为该服务器不可用，并在一段时间内不再将请求转发到该服务器。</li>\n<li><code>fail_timeout</code> ：设置服务器不可用的时间。在这段时间内，Nginx 不会将请求转发到该服务器。一般与 <code>max_fails</code>  配合使用。</li>\n<li><code>backup</code> ：标记该服务器为备用服务器。当其他非备用服务器都不可用时，才会将请求转发到备用服务器。</li>\n<li><code>ip_hash</code> ：根据客户端的 IP 地址进行哈希计算，将同一客户端的请求始终转发到同一台上游服务器。这样可以保证同一客户端的会话保持在同一台服务器上。</li>\n<li><code>least_conn</code> ：将请求转发到连接数最少的上游服务器，实现基于最少连接数的负载均衡。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"缓存策略\"><a class=\"anchor\" href=\"#缓存策略\">#</a> 缓存策略</h2>\n<p>Nginx 支持配置代理缓存，用于缓存后端服务器的响应。</p>\n<h3 id=\"proxy_cache_path\"><a class=\"anchor\" href=\"#proxy_cache_path\">#</a> proxy_cache_path</h3>\n<ul>\n<li>定义：定义缓存路径和相关参数。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>proxy_cache_path /data/nginx/cache <span class=\"token assign-left variable\">levels</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>:2 <span class=\"token assign-left variable\">keys_zone</span><span class=\"token operator\">=</span>my_cache:10m <span class=\"token assign-left variable\">max_size</span><span class=\"token operator\">=</span>1g <span class=\"token assign-left variable\">inactive</span><span class=\"token operator\">=</span>60m <span class=\"token assign-left variable\">use_temp_path</span><span class=\"token operator\">=</span>off<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>说明：\n<ul>\n<li><code>/data/nginx/cache</code> ：设置缓存的存储路径为 <code>/data/nginx/cache</code> 。所有被缓存的响应内容将存储在这个目录下。</li>\n<li><code>levels=1:2</code> ：定义缓存的目录层级结构。这里表示使用两级目录结构。例如，可能会生成类似于 <code>/data/nginx/cache/a/b</code>  的目录路径，其中 <code>a</code>  和 <code>b</code>  是根据缓存键动态生成的目录名称。</li>\n<li><code>keys_zone=my_cache:10m</code> ：创建一个名为  <code>my_cache</code>  的缓存区，大小为 10MB。这个缓存区用于存储缓存的元数据，如缓存键、缓存的过期时间等信息。</li>\n<li><code>max_size=1g</code> ：设置整个缓存的最大尺寸为 1GB。当缓存的总大小超过这个限制时，Nginx 会根据缓存的策略（如  <code>inactive</code>  参数定义的策略）来清理一些缓存内容，以保持缓存的总大小在这个限制之内。</li>\n<li><code>inactive=60m</code> ：如果一个缓存项在 60 分钟内没有被访问，那么它将被视为不活跃，并可能被清理。</li>\n<li><code>use_temp_path=off</code> ：关闭临时路径的使用。通常，Nginx 在缓存文件时可能会先将文件存储在临时路径中，然后再移动到最终的缓存路径。设置这个参数为  <code>off</code>  可以避免使用临时路径，直接将缓存文件存储到指定的缓存路径中，提高缓存的效率。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"proxy_cache\"><a class=\"anchor\" href=\"#proxy_cache\">#</a> <strong>proxy_cache</strong></h3>\n<ul>\n<li>定义：启用缓存，制定缓存区。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    proxy_cache my_cache<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    proxy_pass http://backend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"ssl-配置\"><a class=\"anchor\" href=\"#ssl-配置\">#</a> SSL 配置</h2>\n<p>Nginx 支持 HTTPS，配置 SSL 可以提升安全性。</p>\n<h3 id=\"ssl_certificate-ssl_certificate_key\"><a class=\"anchor\" href=\"#ssl_certificate-ssl_certificate_key\">#</a> ssl_certificate / ssl_certificate_key</h3>\n<ul>\n<li>定义：指定 SSL 证书和秘钥。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    listen <span class=\"token number\">443</span> ssl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ssl_certificate /etc/nginx/ssl/nginx.crt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ssl_certificate_key /etc/nginx/ssl/nginx.key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"ssl_protocols\"><a class=\"anchor\" href=\"#ssl_protocols\">#</a> ssl_protocols</h3>\n<ul>\n<li>定义：指定支持的 SSL/TLS 协议。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssl_protocols TLSv1.2 TLSv1.3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"日志相关配置\"><a class=\"anchor\" href=\"#日志相关配置\">#</a> 日志相关配置</h2>\n<h3 id=\"access_log\"><a class=\"anchor\" href=\"#access_log\">#</a> access_log</h3>\n<ul>\n<li>定义：指定访问日志文件路径和格式。</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># log_format 用于定义日志格式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>log_format myFormat '<span class=\"token variable\">$remote_addr</span>–<span class=\"token variable\">$remote_user</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">$time_local</span><span class=\"token punctuation\">]</span> <span class=\"token variable\">$request</span> <span class=\"token variable\">$status</span> <span class=\"token variable\">$body_bytes_sent</span> <span class=\"token variable\">$http_referer</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>access_log /var/log/nginx/access.log myFormat<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<p>来源：<a href=\"https://juejin.cn/post/7267003603095879714?searchId=20241025142744CB011EB89DC1C375C2DA\">稀土掘金</a></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 全局段配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># ------------------------------</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 指定运行 nginx 的用户或用户组，默认为 nobody。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#user administrator administrators;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 设置工作进程数，通常设置为等于 CPU 核心数。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#worker_processes 2;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 指定 nginx 进程的 PID 文件存放位置。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#pid /nginx/pid/nginx.pid;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 指定错误日志的存放路径和日志级别。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>error_log log/error.log debug<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># events 段配置信息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># ------------------------------</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>events <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># 设置网络连接序列化，用于防止多个进程同时接受到新连接的情况，这种情况称为 \"惊群\"。</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    accept_mutex on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\"># 设置一个进程是否可以同时接受多个新连接。</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    multi_accept on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\"># 设置工作进程的最大连接数。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    worker_connections  <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># http 配置段，用于配置 HTTP 服务器的参数。</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># ------------------------------</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>http <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\"># 包含文件扩展名与 MIME 类型的映射。</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    include       mime.types<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\"># 设置默认的 MIME 类型。</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    default_type  application/octet-stream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\"># 定义日志格式。</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    log_format myFormat <span class=\"token string\">'$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\"># 指定访问日志的存放路径和使用的格式。</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    access_log log/access.log myFormat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\"># 允许使用 sendfile 方式传输文件。</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    sendfile on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\"># 限制每次调用 sendfile 传输的数据量。</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    sendfile_max_chunk 100k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\"># 设置连接的保持时间。</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    keepalive_timeout <span class=\"token number\">65</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\"># 定义一个上游服务器组。</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    upstream mysvr <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      server <span class=\"token number\">127.0</span>.0.1:7878<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      server <span class=\"token number\">192.168</span>.10.121:3333 backup<span class=\"token punctuation\">;</span>  <span class=\"token comment\">#此服务器为备份服务器。</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\"># 定义错误页面的重定向地址。</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    error_page <span class=\"token number\">404</span> https://www.baidu.com<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\"># 定义一个虚拟主机。</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\"># 设置单个连接上的最大请求次数。</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        keepalive_requests <span class=\"token number\">120</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\"># 设置监听的端口和地址。</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        listen       <span class=\"token number\">4545</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        server_name  <span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\"># 定义 location 块，用于匹配特定的请求 URI。</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        location  ~*^.+$ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>           <span class=\"token comment\"># 设置请求的根目录。</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>           <span class=\"token comment\">#root path;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>           <span class=\"token comment\"># 设置默认页面。</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>           <span class=\"token comment\">#index vv.txt;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>           <span class=\"token comment\"># 将请求转发到上游服务器组。</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>           proxy_pass  http://mysvr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>           <span class=\"token comment\"># 定义访问控制规则。</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>           deny <span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>           allow <span class=\"token number\">172.18</span>.5.54<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一些说明：</p>\n<h3 id=\"sendfile\"><a class=\"anchor\" href=\"#sendfile\">#</a> sendfile</h3>\n<ul>\n<li>定义： <code>sendfile</code>  是一种高效的文件传输方式，用于在操作系统层面直接将文件内容从磁盘传输到网络接口，绕过用户空间。它主要用于提高数据传输性能，特别是在处理大文件的场景下。</li>\n<li>工作原理：\n<ul>\n<li>传统的文件传输过程通常需要以下步骤：\n<ul>\n<li>将文件从磁盘读取到内核空间。</li>\n<li>将内核空间的数据拷贝到用户空间。</li>\n<li>用户空间将数据发送到网络接口。</li>\n</ul>\n</li>\n<li><code>sendfile</code>  函数的作用是在<strong>内核空间</strong>中直接完成文件到网络套接字的传输，避免了数据从内核空间到用户空间的多次拷贝，从而减少了上下文切换和系统开销。整个过程简化为：直接将文件数据从内核空间传输到网络接口，无需经过用户空间。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"location-路径映射详解\"><a class=\"anchor\" href=\"#location-路径映射详解\">#</a> location 路径映射详解</h3>\n<div class=\"note warning\">\n<p>以下格式用法在 nginx 均适用，例如：</p>\n</div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request_uri</span> ~ ^/_proxy/<span class=\"token punctuation\">(</span>.*<span class=\"token punctuation\">))</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin class-name\">set</span> <span class=\"token variable\">$backend_host</span> http://<span class=\"token variable\">$1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果请求的 URI 匹配 <code>^/_proxy/(.*)</code>  这个正则表达式，那么就将 $1 设置为变量 <code>$backend_host</code>  的值，</p>\n<ul>\n<li>格式：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location <span class=\"token punctuation\">[</span> <span class=\"token operator\">=</span> <span class=\"token operator\">|</span> ~ <span class=\"token operator\">|</span> ~* <span class=\"token operator\">|</span> <span class=\"token operator\">!</span>~ <span class=\"token operator\">|</span> <span class=\"token operator\">!</span>~* <span class=\"token operator\">|</span> ^~ <span class=\"token operator\">|</span> @ <span class=\"token punctuation\">]</span> uri <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>各标识符解释：\n<ul>\n<li><code>=</code> ：精确匹配。如果匹配成功，立即停止搜索并处理此请求。</li>\n<li><code>~</code> ：执行正则匹配，区分大小写。</li>\n<li><code>~*</code> ：执行正则匹配，不区分大小写。</li>\n<li><code>!~</code> ：正则匹配，区分大小写不匹配。</li>\n<li><code>!~*</code> ：正则匹配，不区分大小写不匹配。</li>\n<li><code>^~</code> ：前缀匹配。如果匹配成功，不再匹配其他 <code>location</code> ，且不查询正则表达式。</li>\n<li><code>@</code> ：指定命名的 <code>location</code> ，主要用于内部重定向请求，如  <code>error_page</code>  和  <code>try_files</code> 。</li>\n<li><code>uri</code> ：待匹配的请求字符串。可以是普通字符串或包含正则表达式。</li>\n</ul>\n</li>\n<li>优先级：优先级顺序：无特定标识 &lt; <code>^~</code> &lt; <code>=</code> &lt; 正则匹配 ( <code>~</code> , <code>~*</code> , <code>!~</code> , <code>!~*</code> )</li>\n<li>示例：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location <span class=\"token operator\">=</span> / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 精确匹配 /，主机名后面不能带任何字符串</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># http://abc.com [匹配成功]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># http://abc.com/index [匹配失败]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>location ^~ /img/ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># 以 /img/ 开头的请求，都会匹配上</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># http://abc.com/img/a.jpg [匹配成功]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># http://abc.com/img/b.mp4 [匹配成功]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>location ~* /Example/ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\"># 忽略 uri 部分的大小写</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># http://abc.com/test/Example/ [匹配成功]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\"># http://abc.com/example/ [匹配成功]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>location /documents <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\"># 如果有正则表达式可以匹配，则优先匹配正则表达式</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\"># http://abc.com/documentsabc [匹配成功]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\"># http://abc.com/abc [匹配成功]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"动静分离\"><a class=\"anchor\" href=\"#动静分离\">#</a> 动静分离</h3>\n<ul>\n<li>概念：动静分离是指将动态内容和静态内容分开处理。静态内容通常包括：图片、CSS、JavaScript、HTML 文件等，这些内容不需要经常更改。而动态内容则是经常变化的，如：PHP、ASP、JSP、Servlet 等生成的内容。</li>\n<li>配置：</li>\n</ul>\n<ol>\n<li>设置根目录</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location ~* .<span class=\"token punctuation\">(</span>jpg<span class=\"token operator\">|</span>jpeg<span class=\"token operator\">|</span>png<span class=\"token operator\">|</span>gif<span class=\"token operator\">|</span>ico<span class=\"token operator\">|</span>css<span class=\"token operator\">|</span>js<span class=\"token punctuation\">)</span>$ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    root /path/to/static/files<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    expires 30d<span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 设置缓存时间</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上述配置中，所有的静态文件都被存放在 <code>/path/to/static/files</code>  目录下。 <code>expires</code>  指令设置了静态文件的缓存时间。</p>\n<ol>\n<li>使用 alias 别名</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location /static/ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin class-name\">alias</span> /path/to/static/files/<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这个配置中，URL 中的 <code>/static/</code>  会映射到文件系统的 <code>/path/to/static/files/</code> 。</p>\n<ol>\n<li>代理动态内容</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    proxy_pass http://backend_server_address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    proxy_set_header Host <span class=\"token variable\">$host</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>注意事项：\n<ul>\n<li>确保你的静态文件路径配置正确，避免 404 错误。</li>\n<li>使用 <code>expires</code>  指令为静态内容设置缓存，这可以减少服务器的负载并提高页面加载速度。</li>\n<li>动静分离不仅可以提高服务器的响应速度，还可以减少后端服务器的压力，因为静态文件通常由 Nginx 直接处理，而不需要代理到后端服务器。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"防盗链\"><a class=\"anchor\" href=\"#防盗链\">#</a> 防盗链</h3>\n<p><img loading=\"lazy\" data-src=\"https://cdn.nlark.com/yuque/0/2024/png/36082988/1733728611151-c7d387a4-3c7e-4d86-a2d8-324fd1667f64.png\" alt=\"\" /></p>\n<blockquote>\n<p>防盗链是指防止其他网站直接链接到你的网站资源（如图片、视频等），从而消耗你的服务器带宽。Nginx 提供了一个非常方便的模块 —— <code>ngx_http_referer_module</code> ，用于实现防盗链功能。</p>\n</blockquote>\n<ul>\n<li>基本配置：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location ~ .*.<span class=\"token punctuation\">(</span>gif<span class=\"token operator\">|</span>jpg<span class=\"token operator\">|</span>jpeg<span class=\"token operator\">|</span>png<span class=\"token operator\">|</span>bmp<span class=\"token operator\">|</span>swf<span class=\"token punctuation\">)</span>$ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    valid_referers none blocked www.example.com example.com *.example.net<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$invalid_referer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token number\">403</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>说明：\n<ul>\n<li><code>valid_referers</code>  定义了合法的来源页面。 <code>none</code>  表示直接访问， <code>blocked</code>  表示没有 <code>Referer</code>  头的访问， <code>www.example.com</code>  和 <code>example.com</code>  是合法的来源域名， <code>*.example.net</code>  表示 <code>example.net</code>  的所有子域名都是合法的来源。</li>\n<li><code>$invalid_referer</code>  变量会在来源不在 <code>valid_referers</code>  列表中时变为 &quot;true&quot;。</li>\n<li>如果来源不合法，服务器将返回 403 禁止访问的状态码。</li>\n</ul>\n</li>\n<li>注意事项：\n<ul>\n<li>防盗链配置可能会影响搜索引擎的爬虫，因此在实施防盗链策略时要小心。</li>\n<li>如果你的网站使用了 CDN，确保 CDN 的服务器也在 <code>valid_referers</code>  列表中，否则 CDN 可能无法正常工作。</li>\n<li>为了确保防盗链配置正确，你应该在生产环境之前在测试环境中进行充分的测试。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "编程知识",
                "前端学习",
                "前端",
                "Nginx"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/computer-science/programming/front-end/Module/",
            "url": "https://nocturne-tome.cn/computer-science/programming/front-end/Module/",
            "title": "Module",
            "date_published": "2024-12-16T11:14:34.000Z",
            "content_html": "<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>在 JavaScript 和其他现代前端框架中，“模块方法” 指的是如何通过模块化方式组织和管理代码，以提高代码的可维护性和可复用性。JavaScript 模块可以封装变量、函数、类等逻辑，通过<strong>模块导出</strong>和<strong>模块导入</strong>机制将这些功能暴露给外部使用。</p>\n<div class=\"note info\">\n<p>一个文件就是一个模块</p>\n</div>\n<h1 id=\"commonjs\"><a class=\"anchor\" href=\"#commonjs\">#</a> CommonJS</h1>\n<ul>\n<li>定义：CommonJS 是 Node.js 中默认使用的模块系统，使用 require 来导入模块，用 module.exports 或 exports 来导出模块。</li>\n<li>使用环境：Node.js</li>\n<li>使用方法：</li>\n</ul>\n<p>导出模块：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subtract</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  add<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  subtract<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>导入模块：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> math <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./math\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 7</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 3</span></pre></td></tr></table></figure><h1 id=\"es6\"><a class=\"anchor\" href=\"#es6\">#</a> ES6</h1>\n<ul>\n<li>定义：ES6（也叫 ES2015）引入了 import 和 export 语法，是现代 JavaScript 模块化的标准。</li>\n<li>使用环境：现代浏览器和 Node.js</li>\n<li>使用方法：</li>\n</ul>\n<p>导出模块：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subtract</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>导入模块：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> add<span class=\"token punctuation\">,</span> subtract <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./math.js\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 7</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 3</span></pre></td></tr></table></figure><p>默认导出：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> square<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>默认导入：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> square <span class=\"token keyword\">from</span> <span class=\"token string\">\"./utils.js\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 9</span></pre></td></tr></table></figure><h1 id=\"amd\"><a class=\"anchor\" href=\"#amd\">#</a> AMD</h1>\n<ul>\n<li>定义：AMD (Asynchronous Module Definition) 模块系统主要用于浏览器环境，适合异步加载模块。require.js 是一个流行的 AMD 实现。</li>\n<li>使用环境：浏览器</li>\n<li>使用方法：</li>\n</ul>\n<p>定义和导出模块：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function-variable function\">subtract</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>导入模块：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"math\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">math</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 7</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"umd\"><a class=\"anchor\" href=\"#umd\">#</a> UMD</h1>\n<ul>\n<li>定义：UMD (Universal Module Definition) 是一种兼容多种模块加载器的模块系统，通常用于构建兼容性较好的库。</li>\n<li>使用环境：浏览器、Node.js、AMD 模块系统等</li>\n<li>使用方法：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> module <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    root<span class=\"token punctuation\">.</span>myModule <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function-variable function\">subtract</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"iife\"><a class=\"anchor\" href=\"#iife\">#</a> IIFE</h1>\n<ul>\n<li>定义：在模块化标准出现之前，IIFE (Immediately Invoked Function Expression) 是一种常见的模块模式。它通过函数立即执行来创建作用域并封装变量。</li>\n<li>使用环境：</li>\n<li>使用方法：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> myModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> privateVar <span class=\"token operator\">=</span> <span class=\"token string\">\"I am private\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">privateMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>privateVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function-variable function\">publicMethod</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function\">privateMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>myModule<span class=\"token punctuation\">.</span><span class=\"token function\">publicMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 'I am private'</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "编程知识",
                "前端学习",
                "前端",
                "Module"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/computer-science/programming/front-end/%E9%A2%84%E8%8E%B7%E5%8F%96%E5%92%8C%E9%A2%84%E5%8A%A0%E8%BD%BD/",
            "url": "https://nocturne-tome.cn/computer-science/programming/front-end/%E9%A2%84%E8%8E%B7%E5%8F%96%E5%92%8C%E9%A2%84%E5%8A%A0%E8%BD%BD/",
            "title": "预获取和预加载(prefetch&preload)",
            "date_published": "2024-12-16T11:12:22.000Z",
            "content_html": "<h1 id=\"共同点\"><a class=\"anchor\" href=\"#共同点\">#</a> 共同点</h1>\n<ul>\n<li>浏览器资源加载优化机制，通过提前加载资源来提升页面性能</li>\n<li>都是 <code>&lt;link&gt;</code>  属性 <code>rel</code>  的关键字（值）</li>\n</ul>\n<h1 id=\"不同点\"><a class=\"anchor\" href=\"#不同点\">#</a> 不同点</h1>\n<table>\n<thead>\n<tr>\n<th><strong>特性</strong></th>\n<th>prefetch</th>\n<th>preload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>用途</strong></td>\n<td>未来页面导航所需资源的预获取</td>\n<td>当前页面渲染的关键资源的提前加载</td>\n</tr>\n<tr>\n<td><strong>优先级</strong></td>\n<td>低，浏览器空闲时才加载</td>\n<td>高，立即加载</td>\n</tr>\n<tr>\n<td><strong>应用场景</strong></td>\n<td>后续导航可能用到的资源（例如单页应用的下一页面）</td>\n<td>当前页面渲染需要的关键资源（如关键 CSS、JS 等）</td>\n</tr>\n<tr>\n<td><strong>浏览器行为</strong></td>\n<td>不会立即使用，未来可能会用到的资源</td>\n<td>页面需要立即使用的资源</td>\n</tr>\n<tr>\n<td><strong>影响页面渲染</strong></td>\n<td>不影响当前页面渲染</td>\n<td>加速页面渲染，优化加载顺序</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"适用场合\"><a class=\"anchor\" href=\"#适用场合\">#</a> 适用场合</h1>\n<ul>\n<li><code>prefetch</code>  适合用在用户未来可能访问的页面、资源上，以便页面切换时加载更快。</li>\n<li><code>preload</code>  适合用在当前页面的关键资源上，优化初次渲染时的资源加载顺序，确保关键资源不会被阻塞。</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefetch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/next-page.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/styles.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/script.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/image.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><div class=\"note warning\">\n<p>使用 preload 需要指定资源类型 (as 属性)，如 script、style、image 等，以便浏览器正确处理这些资源。</p>\n</div>\n",
            "tags": [
                "计算机科学",
                "编程知识",
                "前端学习",
                "前端",
                "性能优化"
            ]
        },
        {
            "id": "https://nocturne-tome.cn/computer-science/programming/front-end/JS%E4%B8%AD%E7%9A%84%E6%89%93%E5%8D%B0%E6%96%B9%E6%B3%95/",
            "url": "https://nocturne-tome.cn/computer-science/programming/front-end/JS%E4%B8%AD%E7%9A%84%E6%89%93%E5%8D%B0%E6%96%B9%E6%B3%95/",
            "title": "JS中的打印方法",
            "date_published": "2024-12-16T08:52:01.000Z",
            "content_html": "<h1 id=\"console\"><a class=\"anchor\" href=\"#console\">#</a> console</h1>\n<p>用于打印信息到控制台（console）。</p>\n<ul>\n<li>console.log ()：打印普通信息，用于一般调试。</li>\n<li><a href=\"http://console.info\">console.info</a> ()：打印提示信息，一般用于提示性输出。</li>\n<li>console.warn ()：打印警告信息，通常用于显示非错误但需要注意的内容。</li>\n<li>console.error ()：打印错误信息，一般用于调试错误或异常情况。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"log.png\" alt=\"\" height=\"120\" /></p>\n<ul>\n<li>console.table ()：以表格的形式显示数据（数组或对象）。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> students <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"table1.png\" alt=\"\" title=\"Node中输出\" height=\"130\" /></p>\n<p><img loading=\"lazy\" data-src=\"table2.png\" alt=\"\" title=\"浏览器中输出\" height=\"120\" /></p>\n<ul>\n<li>console.dir ()：显示对象的结构信息，适合查看 DOM 对象或嵌套对象。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>console.group () 和 console.groupEnd ()：将打印信息分组。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Group Example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">groupEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"group.png\" alt=\"\" width=\"650\" /></p>\n<ul>\n<li>console.assert ()：用于在表达式为 false 时输出错误消息。适合条件调试。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> isAdult <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>isAdult<span class=\"token punctuation\">,</span> <span class=\"token string\">\"User is not an adult\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>console.trace ()：打印当前调用栈信息，便于追踪代码的执行路径。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Trace example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"trace.png\" alt=\"\" width=\"300\" /></p>\n<ul>\n<li>console.time () 和 console.timeEnd ()：用来计算代码执行的时间，适合性能测试和调试。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Timer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 模拟耗时操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Timer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出时间</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"time.png\" alt=\"\" width=\"200\" /></p>\n<h1 id=\"alert\"><a class=\"anchor\" href=\"#alert\">#</a> alert</h1>\n<p>alert () 会在页面上弹出一个提示框，通常用于简单的提示或调试，但不推荐在生产环境中使用。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is an alert message!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"alert.png\" alt=\"\" width=\"500\" /></p>\n<h1 id=\"documentwrite\"><a class=\"anchor\" href=\"#documentwrite\">#</a> document.write</h1>\n<p>document.write () 会直接将内容写入页面，用于输出 HTML 内容，适合简单的页面测试，不建议在动态页面中使用。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p>Hello, World!&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"print\"><a class=\"anchor\" href=\"#print\">#</a> print</h1>\n<p>print () 在某些浏览器（如 Firefox）中可用，会打开（文档）打印对话框，但兼容性较低。</p>\n",
            "tags": [
                "计算机科学",
                "编程知识",
                "前端学习",
                "前端",
                "JavaScript"
            ]
        }
    ]
}